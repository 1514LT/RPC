/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file NonDeclaredEmptyBodyTestClientExample.cxx
 * This source file shows a simple example of how to create a proxy for an interface.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "NonDeclaredEmptyBodyTestProxy.h"
#include "NonDeclaredEmptyBodyTestRESTProtocol.h"
#include "rpcdds/transports/HttpProxyTransport.h"
#include "rpcdds/exceptions/Exceptions.h"

#include <iostream>

using namespace eprosima::rpcdds;
using namespace eprosima::rpcdds::exception;
using namespace eprosima::rpcdds::transport;
using namespace eprosima::rpcdds::protocol::rest;

using namespace NonDeclaredEmptyBodyTest;

int main(int argc, char **argv)
{
    NonDeclaredEmptyBodyTestProtocol *protocol = NULL;
    ProxyTransport *transport = NULL;
    resourceResourceProxy *proxy = NULL;
    
    // Creation of the proxy for interface "resourceResource".
    try
    {
        protocol = new NonDeclaredEmptyBodyTestProtocol();
        transport = new HttpProxyTransport("127.0.0.1:8080");
        proxy = new resourceResourceProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }
    
    // Create and initialize parameters.
    PostBodyParamRequest PostBodyParamRequest;
    PostBodyParamRequest_initialize(&PostBodyParamRequest);

	PostBodyParamRequest._d = 1;

    // Create and initialize return value.
    PostBodyParamResponse postBodyParam_ret;
    PostBodyParamResponse_initialize(&postBodyParam_ret);

    // Call to remote procedure "postBodyParam".
    try
    {
	cout << "Non expected empty request body. Response code must be 400." << endl;

        postBodyParam_ret = proxy->postBodyParam(PostBodyParamRequest);

	if(postBodyParam_ret._d == 0) {
		if(postBodyParam_ret._u.emptyPostBodyParamResponse.status == 400) {
			cout << "\tTEST PASSED" << endl;
		} else {
			return 1;
		}
	} else {
		return 1;
	}
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
	return 1;
    }

	/***********************************************************/

	PostBodyParamRequest_initialize(&PostBodyParamRequest);
	PostBodyParamRequest._d = 1;
	PostBodyParamRequest._u.xmlRepresentation = strdup("<XMLPost>TEST</XMLPost>");
	PostBodyParamResponse_initialize(&postBodyParam_ret);

    // Call to remote procedure "postBodyParam".
    try
    {
	cout << "Non expected empty response body. Response code must be 200, but with no data." << endl;

        postBodyParam_ret = proxy->postBodyParam(PostBodyParamRequest);

	if(postBodyParam_ret._d == 0) {
		if(postBodyParam_ret._u.emptyPostBodyParamResponse.status == 200) {
			cout << "\tTEST PASSED" << endl;
		} else {
			return 1;
		}
	} else {
		return 1;
	}
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
	return 1;
    }
    
    PostBodyParamRequest_finalize(&PostBodyParamRequest);

    PostBodyParamResponse_finalize(&postBodyParam_ret);
    
    delete(proxy);
    delete(transport);
    delete(protocol);
   
    return 0;
}




