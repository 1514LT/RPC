/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file SequenceTestClientExample.cxx
 * This source file shows a simple example of how to create a proxy for an interface.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "SequenceTestProxy.h"
#include "SequenceTest.h"
#include "SequenceTestDDSProtocol.h"
#include "rpcdds/transports/dds/UDPProxyTransport.h"
#include "rpcdds/exceptions/Exceptions.h"

#include <iostream>

using namespace eprosima::rpcdds;
using namespace ::exception;
using namespace ::transport::dds;
using namespace ::protocol::dds;

int main(int argc, char **argv)
{
    SequenceTestProtocol *protocol = NULL;
    UDPProxyTransport *transport = NULL;
    SequenceTestProxy *proxy = NULL;

    // Creation of the proxy for interface "SequenceTest".
    try
    {
        protocol = new SequenceTestProtocol();
        transport = new UDPProxyTransport("SequenceTestService");
        proxy = new SequenceTestProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    largo l1;
    largo l2;
    largo l3;
    largo getSeqLong_ret;

    l1.push_back(1);
    l1.push_back(2);
    l2.push_back(3);
    l2.push_back(4);

    try
    {
        getSeqLong_ret = proxy->getSeqLong(l1, l2, l3);

        if(l3.size() != 2 || l3[0] != 3 || l3[1] != 4 ||
                getSeqLong_ret.size() != 2 || getSeqLong_ret[0] != 1 || getSeqLong_ret[1] != 2 ||
                l2.size() != 2 || l2[0] != 4 || l2[1] != 6 ||
                l1.size() != 2 || l1[0] != 1 || l1[1] != 2)
        {
            std::cout << "TEST FAILED<getSeqLong>: Wrong values " << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout << "TEST FAILED<getSeqLong>: " << ex.what() << std::endl;
        _exit(-1);
    }

    cadena s1;
    cadena s2;
    cadena s3;
    cadena getSeqString_ret;

    s1.push_back("PRUEBA");
    s1.push_back("PRUEBA2");
    s2.push_back("PRUEBA3");
    s2.push_back("PRUEBA4");

    try
    {
        getSeqString_ret = proxy->getSeqString(s1, s2, s3);

        if(s3.size() != 2 || s3[0].compare("PRUEBA3")  != 0 || s3[1].compare("PRUEBA4")  != 0 ||
                getSeqString_ret.size() != 2 || getSeqString_ret[0].compare("PRUEBA")  != 0  || getSeqString_ret[1].compare("PRUEBA2")  != 0 ||
                s2.size() != 2 || s2[0].compare("PRUEBA")  != 0  || s2[1].compare("PRUEBA2")  != 0 ||
                s1.size() != 2 || s1[0].compare("PRUEBA")  != 0  || s1[1].compare("PRUEBA2")  != 0)
        {
            std::cout << "TEST FAILED<getSeqString>: Wrong values" << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout << "TEST FAILED<getSeqString>: " << ex.what() << std::endl;
        _exit(-1);
    }

    dattos sb1;       
    dattos sb2;       
    dattos sb3;    
    dattos getSeqDatos_ret;

    Datos data;
    data.count(1);
    data.message("PRUEBA");
    sb1.push_back(data);
    data.count(2);
    data.message("PRUEBA2");
    sb1.push_back(data);
    data.count(3);
    data.message("PRUEBA3");
    sb2.push_back(data);
    data.count(4);
    data.message("PRUEBA4");
    sb2.push_back(data);

    try
    {
        getSeqDatos_ret = proxy->getSeqDatos(sb1, sb2, sb3);

        if(sb3.size() != 2 || sb3[0].count() != 3 || sb3[0].message().compare("PRUEBA3") != 0 || sb3[1].count() != 4 || sb3[1].message().compare("PRUEBA4")  != 0 ||
                getSeqDatos_ret.size() != 2 || getSeqDatos_ret[0].count() != 1 || getSeqDatos_ret[0].message().compare("PRUEBA")  != 0  ||
                getSeqDatos_ret[1].count() != 2 || getSeqDatos_ret[1].message().compare("PRUEBA2")  != 0 ||
                sb2.size() != 2 || sb2[0].count() != 1 || sb2[0].message().compare("PRUEBA")  != 0  || sb2[1].count() != 2 || sb2[1].message().compare("PRUEBA2")  != 0 ||
                sb1.size() != 2 || sb1[0].count() != 1 || sb1[0].message().compare("PRUEBA")  != 0  || sb1[1].count() != 2 || sb1[1].message().compare("PRUEBA2")  != 0)
        {
            std::cout << "TEST FAILED<getSeqDatos>: Wrong values" << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout << "TEST FAILED<getSeqDatos>: " << ex.what() << std::endl;
        _exit(-1);
    }

    seqseq ss1(2);
    ss1[0].resize(2);
    ss1[0][0] = 1;
    ss1[0][1] = 2;
    ss1[1].resize(2);
    ss1[1][0] = 3;
    ss1[1][1] = 4;
    seqseq ss2(2);
    ss2[0].resize(2);
    ss2[0][0] = 5;
    ss2[0][1] = 6;
    ss2[1].resize(2);
    ss2[1][0] = 7;
    ss2[1][1] = 8;
    seqseq ss3;
    seqseq getSeqSeq_ret;

    try
    {
        getSeqSeq_ret = proxy->getSeqSeq(ss1, ss2, ss3);

        if(ss3.size() != 2 || ss3[0].size() != 2 || ss3[0][0] != 5 || ss3[0][1] != 6 || ss3[1].size() != 2 || ss3[1][0]  != 7 || ss3[1][1] != 8 ||
                getSeqSeq_ret.size() != 2 || getSeqSeq_ret[0].size() != 2 || getSeqSeq_ret[0][0] != 1  || getSeqSeq_ret[0][1] != 2 ||
                getSeqSeq_ret[1].size() != 2 || getSeqSeq_ret[1][0] != 3 || getSeqSeq_ret[1][1] != 4 ||
                ss2.size() != 2 || ss2[0].size() != 2 || ss2[0][0] != 1  || ss2[0][1] != 2 || ss2[1].size()  != 2 || ss2[1][0] != 3 || ss2[1][1] != 4 ||
                ss1.size() != 2 || ss1[0].size() != 2 || ss1[0][0] != 1  || ss1[0][1] != 2 || ss1[1].size()  != 2 || ss1[1][0] != 3 || ss1[1][1] != 4)
        {
            std::cout << "TEST FAILED<getSeqSeq>: Wrong values" << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout << "TEST FAILED<getSeqSeq>: " << ex.what() << std::endl;
        _exit(-1);
    }

    seqdat sd1(2);
    sd1[0].resize(2);
    sd1[0][0].count(1);
    sd1[0][0].message("PRUEBA1");
    sd1[0][1].count(2);
    sd1[0][1].message("PRUEBA2");
    sd1[1].resize(2);
    sd1[1][0].count(3);
    sd1[1][0].message("PRUEBA3");
    sd1[1][1].count(4);
    sd1[1][1].message("PRUEBA4");
    seqdat sd2(2);
    sd2[0].resize(2);
    sd2[0][0].count(5);
    sd2[0][0].message("PRUEBA5");
    sd2[0][1].count(6);
    sd2[0][1].message("PRUEBA6");
    sd2[1].resize(2);
    sd2[1][0].count(7);
    sd2[1][0].message("PRUEBA7");
    sd2[1][1].count(8);
    sd2[1][1].message("PRUEBA8");
    seqdat sd3;
    seqdat getSeqDat_ret;

    try
    {
        getSeqDat_ret = proxy->getSeqDat(sd1, sd2, sd3);

        if(sd3.size() != 2 || sd3[0].size() != 2 || sd3[0][0].count() != 5 || sd3[0][0].message().compare("PRUEBA5") != 0 ||
                sd3[0][1].count() != 6 || sd3[0][1].message().compare("PRUEBA6") ||
                sd3[1].size() != 2 || sd3[1][0].count()  != 7 || sd3[1][0].message().compare("PRUEBA7") ||
                sd3[1][1].count() != 8 || sd3[1][1].message().compare("PRUEBA8") ||
                getSeqDat_ret.size() != 2 || getSeqDat_ret[0].size() != 2 || getSeqDat_ret[0][0].count() != 1  || getSeqDat_ret[0][0].message().compare("PRUEBA1") ||
                getSeqDat_ret[0][1].count() != 2 || getSeqDat_ret[0][1].message().compare("PRUEBA2") ||
                getSeqDat_ret[1].size() != 2 || getSeqDat_ret[1][0].count() != 3 || getSeqDat_ret[1][0].message().compare("PRUEBA3") ||
                getSeqDat_ret[1][1].count() != 4 || getSeqDat_ret[1][1].message().compare("PRUEBA4") ||
                sd2.size() != 2 || sd2[0].size() != 2 || sd2[0][0].count() != 1  || sd2[0][0].message().compare("PRUEBA1") ||
                sd2[0][1].count() != 2 || sd2[0][1].message().compare("PRUEBA2") ||
                sd2[1].size() != 2 || sd2[1][0].count() != 3 || sd2[1][0].message().compare("PRUEBA3") ||
                sd2[1][1].count() != 4 || sd2[1][1].message().compare("PRUEBA4") ||
                sd1.size() != 2 || sd1[0].size() != 2 || sd1[0][0].count() != 1  || sd1[0][0].message().compare("PRUEBA1") ||
                sd1[0][1].count() != 2 || sd1[0][1].message().compare("PRUEBA2") ||
                sd1[1].size() != 2 || sd1[1][0].count() != 3 || sd1[1][0].message().compare("PRUEBA3") ||
                sd1[1][1].count() != 4 || sd1[1][1].message().compare("PRUEBA4"))
        {
            std::cout << "TEST FAILED<getSeqDat>: Wrong values" << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout << "TEST FAILED<getSeqDat>: " << ex.what() << std::endl;
        _exit(-1);
    }

    SequenceTest::Sequences seq1;
    seq1.strings().push_back("PRUEBA1");
    seq1.strings().push_back("PRUEBA2");
    seq1.datos().resize(2);
    seq1.datos()[0].count(1);
    seq1.datos()[0].message("PRUEBA1");
    seq1.datos()[1].count(2);
    seq1.datos()[1].message("PRUEBA2");
    seq1.seqseq().resize(2);
    seq1.seqseq()[0].resize(2);
    seq1.seqseq()[0][0] = 1;
    seq1.seqseq()[0][1] = 2;
    seq1.seqseq()[1].resize(2);
    seq1.seqseq()[1][0] = 3;
    seq1.seqseq()[1][1] = 4;
    seq1.seqdat().resize(2);
    seq1.seqdat()[0].resize(2);
    seq1.seqdat()[0][0].count(1);
    seq1.seqdat()[0][0].message("PRUEBA1");
    seq1.seqdat()[0][1].count(2);
    seq1.seqdat()[0][1].message("PRUEBA2");
    seq1.seqdat()[1].resize(2);
    seq1.seqdat()[1][0].count(3);
    seq1.seqdat()[1][0].message("PRUEBA3");
    seq1.seqdat()[1][1].count(4);
    seq1.seqdat()[1][1].message("PRUEBA4");
    SequenceTest::Sequences seq2;
    seq2.strings().push_back("PRUEBA5");
    seq2.strings().push_back("PRUEBA6");
    seq2.datos().resize(2);
    seq2.datos()[0].count(5);
    seq2.datos()[0].message("PRUEBA5");
    seq2.datos()[1].count(6);
    seq2.datos()[1].message("PRUEBA6");
    seq2.seqseq().resize(2);
    seq2.seqseq()[0].resize(2);
    seq2.seqseq()[0][0] = 5;
    seq2.seqseq()[0][1] = 6;
    seq2.seqseq()[1].resize(2);
    seq2.seqseq()[1][0] = 7;
    seq2.seqseq()[1][1] = 8;
    seq2.seqdat().resize(2);
    seq2.seqdat()[0].resize(2);
    seq2.seqdat()[0][0].count(5);
    seq2.seqdat()[0][0].message("PRUEBA5");
    seq2.seqdat()[0][1].count(6);
    seq2.seqdat()[0][1].message("PRUEBA6");
    seq2.seqdat()[1].resize(2);
    seq2.seqdat()[1][0].count(7);
    seq2.seqdat()[1][0].message("PRUEBA7");
    seq2.seqdat()[1][1].count(8);
    seq2.seqdat()[1][1].message("PRUEBA8");
    SequenceTest::Sequences seq3;
    SequenceTest::Sequences getSequences_ret;

    try
    {
        getSequences_ret = proxy->getSequences(seq1, seq2, seq3);

        if(seq3.strings().size() != 2 || seq3.strings()[0].compare("PRUEBA5") || seq3.strings()[1].compare("PRUEBA6") ||
                seq3.datos().size() != 2 || seq3.datos()[0].count() != 5 || seq3.datos()[0].message().compare("PRUEBA5") ||
                seq3.datos()[1].count() != 6 || seq3.datos()[1].message().compare("PRUEBA6") ||
                seq3.seqseq().size() != 2 || seq3.seqseq()[0].size() != 2 || seq3.seqseq()[0][0] != 5 || seq3.seqseq()[0][1] != 6 ||
                seq3.seqseq()[1].size() != 2 || seq3.seqseq()[1][0] != 7 || seq3.seqseq()[1][1] != 8 ||
                seq3.seqdat().size() != 2 || seq3.seqdat()[0].size() != 2 || seq3.seqdat()[0][0].count() != 5 || seq3.seqdat()[0][0].message().compare("PRUEBA5") ||
                seq3.seqdat()[0][1].count() != 6 || seq3.seqdat()[0][1].message().compare("PRUEBA6") ||
                seq3.seqdat()[1].size() != 2 || seq3.seqdat()[1][0].count() != 7 || seq3.seqdat()[1][0].message().compare("PRUEBA7") ||
                seq3.seqdat()[1][1].count() != 8 || seq3.seqdat()[1][1].message().compare("PRUEBA8") ||
                getSequences_ret.strings().size() != 2 || getSequences_ret.strings()[0].compare("PRUEBA1") || getSequences_ret.strings()[1].compare("PRUEBA2") ||
                getSequences_ret.datos().size() != 2 || getSequences_ret.datos()[0].count() != 1 || getSequences_ret.datos()[0].message().compare("PRUEBA1") ||
                getSequences_ret.datos()[1].count() != 2 || getSequences_ret.datos()[1].message().compare("PRUEBA2") ||
                getSequences_ret.seqseq().size() != 2 || getSequences_ret.seqseq()[0].size() != 2 || getSequences_ret.seqseq()[0][0] != 1 || getSequences_ret.seqseq()[0][1] != 2 ||
                getSequences_ret.seqseq()[1].size() != 2 || getSequences_ret.seqseq()[1][0] != 3 || getSequences_ret.seqseq()[1][1] != 4 ||
                getSequences_ret.seqdat().size() != 2 || getSequences_ret.seqdat()[0].size() != 2 ||
                getSequences_ret.seqdat()[0][0].count() != 1 || getSequences_ret.seqdat()[0][0].message().compare("PRUEBA1") ||
                getSequences_ret.seqdat()[0][1].count() != 2 || getSequences_ret.seqdat()[0][1].message().compare("PRUEBA2") ||
                getSequences_ret.seqdat()[1].size() != 2 || getSequences_ret.seqdat()[1][0].count() != 3 || getSequences_ret.seqdat()[1][0].message().compare("PRUEBA3") ||
                getSequences_ret.seqdat()[1][1].count() != 4 || getSequences_ret.seqdat()[1][1].message().compare("PRUEBA4") ||
                seq2.strings().size() != 2 || seq2.strings()[0].compare("PRUEBA1") || seq2.strings()[1].compare("PRUEBA2") ||
                seq2.datos().size() != 2 || seq2.datos()[0].count() != 1 || seq2.datos()[0].message().compare("PRUEBA1") ||
                seq2.datos()[1].count() != 2 || seq2.datos()[1].message().compare("PRUEBA2") ||
                seq2.seqseq().size() != 2 || seq2.seqseq()[0].size() != 2 || seq2.seqseq()[0][0] != 1 || seq2.seqseq()[0][1] != 2 ||
                seq2.seqseq()[1].size() != 2 || seq2.seqseq()[1][0] != 3 || seq2.seqseq()[1][1] != 4 ||
                seq2.seqdat().size() != 2 || seq2.seqdat()[0].size() != 2 ||
                seq2.seqdat()[0][0].count() != 1 || seq2.seqdat()[0][0].message().compare("PRUEBA1") ||
                seq2.seqdat()[0][1].count() != 2 || seq2.seqdat()[0][1].message().compare("PRUEBA2") ||
                seq2.seqdat()[1].size() != 2 || seq2.seqdat()[1][0].count() != 3 || seq2.seqdat()[1][0].message().compare("PRUEBA3") ||
                seq2.seqdat()[1][1].count() != 4 || seq2.seqdat()[1][1].message().compare("PRUEBA4") ||
                seq1.strings().size() != 2 || seq1.strings()[0].compare("PRUEBA1") || seq1.strings()[1].compare("PRUEBA2") ||
                seq1.datos().size() != 2 || seq1.datos()[0].count() != 1 || seq1.datos()[0].message().compare("PRUEBA1") ||
                seq1.datos()[1].count() != 2 || seq1.datos()[1].message().compare("PRUEBA2") ||
                seq1.seqseq().size() != 2 || seq1.seqseq()[0].size() != 2 || seq1.seqseq()[0][0] != 1 || seq1.seqseq()[0][1] != 2 ||
                seq1.seqseq()[1].size() != 2 || seq1.seqseq()[1][0] != 3 || seq1.seqseq()[1][1] != 4 ||
                seq1.seqdat().size() != 2 || seq1.seqdat()[0].size() != 2 ||
                seq1.seqdat()[0][0].count() != 1 || seq1.seqdat()[0][0].message().compare("PRUEBA1") ||
                seq1.seqdat()[0][1].count() != 2 || seq1.seqdat()[0][1].message().compare("PRUEBA2") ||
                seq1.seqdat()[1].size() != 2 || seq1.seqdat()[1][0].count() != 3 || seq1.seqdat()[1][0].message().compare("PRUEBA3") ||
                seq1.seqdat()[1][1].count() != 4 || seq1.seqdat()[1][1].message().compare("PRUEBA4"))
        {
            std::cout << "TEST FAILED<getSequences>: Wrong values" << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout << "TEST FAILED<getSequences>: " << ex.what() << std::endl;
        _exit(-1);
    }

    std::cout << "TEST SUCCESFULLY" << std::endl;

    delete(proxy);
    delete(transport);
    delete(protocol);

    _exit(0);
    return 0;
}
