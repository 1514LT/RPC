/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file BasicTypeTestClientExample.cxx
 * This source file shows a simple example of how to create a proxy for an interface.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "StructTestProxy.h"
#include "StructTestCDRProtocol.h"
#include "rpcdds/transports/TCPProxyTransport.h"
#include "rpcdds/exceptions/Exceptions.h"

#include <iostream>

using namespace eprosima::rpcdds;
using namespace ::exception;
using namespace ::transport;
using namespace ::protocol::cdr;

int main(int argc, char **argv)
{
    StructTestProtocol *protocol = NULL;
    TCPProxyTransport *transport = NULL;
    StructTestProxy *proxy = NULL;
    
    // Creation of the proxy for interface "StructTest".
    try
    {
        protocol = new StructTestProtocol();
        transport = new TCPProxyTransport("127.0.0.1:8080");
        proxy = new StructTestProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }
    
    Envio ev;
    Recepcion duplicate_ret;

	Envio_initialize(&ev);    
    Recepcion_initialize(&duplicate_ret);    
        
    ev.dato = 10;
    ev.message = DDS_String_dup("HOLA");

    try
    {
        duplicate_ret = proxy->duplicate(ev);

        if(duplicate_ret.devolucion != 10 ||
                strcmp(duplicate_ret.message, "HOLA") != 0 ||
                ev.dato != 10 ||
                strcmp(ev.message, "HOLA") != 0)
        {
            std::cout << "TEST FAILED<duplicate>: Wrong values" << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout << "TEST FAILED<duplicate>: " << ex.what() << std::endl;
        _exit(-1);
    }

    Envio_finalize(&ev);    
    Recepcion_finalize(&duplicate_ret);    

	Envio ev1;    
	Envio ev2;       
	Recepcion suma_ret;

	Envio_initialize(&ev1);    
	Envio_initialize(&ev2);    
	Recepcion_initialize(&suma_ret);  

	ev1.dato = 10;
	ev1.message = DDS_String_dup("HOLA");
	ev2.dato = 20;
	ev2.message = DDS_String_dup("ADIOS");

    try
    {
        suma_ret = proxy->suma(ev1, ev2);

        if(suma_ret.devolucion != 30 ||
                strcmp(suma_ret.message, "HOLAADIOS") != 0 ||
                ev1.dato != 10 ||
                strcmp(ev1.message, "HOLA") != 0 ||
                ev2.dato != 20 ||
                strcmp(ev2.message, "ADIOS") != 0)
        {
            std::cout << "TEST FAILED<suma>: Wrong values" << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout << "TEST FAILED<suma>: " << ex.what() << std::endl;
        _exit(-1);
    }

	Envio_finalize(&ev1);    
	Envio_finalize(&ev2);    
	Recepcion_finalize(&suma_ret);    

    InnerStruct inn;
    InnerStruct inn_res;

    InnerStruct_initialize(&inn);
    InnerStruct_initialize(&inn_res);

    inn.count = 43;
    inn.message = DDS_String_dup("PAPITO");

    try
    {
        inn_res = proxy->inner(inn);

        if(inn.count != 43 ||
                strcmp(inn_res.message, "PAPITO") != 0)
        {
            std::cout << "TEST FAILED<inner>: Wrong values" << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout << "TEST FAILED<inner>: " << ex.what() << std::endl;
        _exit(-1);
    }

    InnerStruct_finalize(&inn);
    InnerStruct_finalize(&inn_res);

    std::cout << "TEST SUCCESFULLY" << std::endl;

	delete(proxy);
    delete(transport);
    delete(protocol);

	_exit(0);
	return 0;
}
