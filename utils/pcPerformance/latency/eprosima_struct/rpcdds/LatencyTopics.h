/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * fastrpc_LICENSE file included in this fastrpc distribution.
 *
 *************************************************************************
 * 
 * @file LatencyTopics.h
 * This header file contains the declaration of topics generated using operations in the IDL file.
 *
 * This file was generated by the tool fastrpcgen.
 */

#ifndef _Latency_TOPICS_H_
#define _Latency_TOPICS_H_

#include "Latency.h"
#include "fastrpc/protocols/dds/MessageHeader.h"

#include <cstddef>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define user_cpp_DllExport __declspec( dllexport )
#else
#define user_cpp_DllExport
#endif
#else
#define user_cpp_DllExport
#endif



/*!
 * @brief This class represents the structure Latency_latencyRequest that can be used to send/receive requests
 * for the operation Latency::latency.
 * @ingroup LATENCY
 */
class user_cpp_DllExport Latency_latencyRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    Latency_latencyRequest();
    
    /*!
     * @brief Destructor.
     */
    ~Latency_latencyRequest();
    
    /*
     * @brief Copy constructor.
     * @param x Reference to the object Latency_latencyRequest that will be copied.
     */
    Latency_latencyRequest(const Latency_latencyRequest &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Latency_latencyRequest that will be copied.
     */
    Latency_latencyRequest(Latency_latencyRequest &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_latency that will be copied.
     */
    Latency_latencyRequest& operator=(const Latency_latencyRequest &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_latency that will be copied.
     */
    Latency_latencyRequest& operator=(Latency_latencyRequest &&x);

    /*!
     * @brief This function copies the value in member param
     * @param _param New value to be copied in member param
     */
    inline void param(const st &_param)
    {
        m_param = _param;
    }

    /*!
     * @brief This function moves the value in member param
     * @param _param New value to be moved in member param
     */
    inline void param(st &&_param)
    {
        m_param = std::move(_param);
    }

    /*!
     * @brief This function returns a constant reference to member param
     * @return Constant reference to member param
     */
    inline const st& param() const
    {
        return m_param;
    }

    /*!
     * @brief This function returns a reference to member param
     * @return Reference to member param
     */
    inline st& param()
    {
        return m_param;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    st m_param;
};

/*!
 * @brief This class represents the structure Latency_latencyReply that can be used to send/receive replies
 * for the operation Latency::latency.
 * 
 * @ingroup LATENCY
 */
class user_cpp_DllExport Latency_latencyReply
{
public:

    /*!
     * @brief Default constructor.
     */
    Latency_latencyReply();
    
    /*!
     * @brief Destructor.
     */
    ~Latency_latencyReply();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Latency_latencyReply that will be copied.
     */
    Latency_latencyReply(const Latency_latencyReply &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Latency_latencyReply that will be copied.
     */
    Latency_latencyReply(Latency_latencyReply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_latency that will be copied.
     */
    Latency_latencyReply& operator=(const Latency_latencyReply &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_latency that will be copied.
     */
    Latency_latencyReply& operator=(Latency_latencyReply &&x);

    /*!
     * @brief This function copies the value in member latency_ret
     * @param _latency_ret New value to be copied in member latency_ret
     */
    inline void latency_ret(const st &_latency_ret)
    {
        m_latency_ret = _latency_ret;
    }

    /*!
     * @brief This function moves the value in member latency_ret
     * @param _latency_ret New value to be moved in member latency_ret
     */
    inline void latency_ret(st &&_latency_ret)
    {
        m_latency_ret = std::move(_latency_ret);
    }

    /*!
     * @brief This function returns a constant reference to member latency_ret
     * @return Constant reference to member latency_ret
     */
    inline const st& latency_ret() const
    {
        return m_latency_ret;
    }

    /*!
     * @brief This function returns a reference to member latency_ret
     * @return Reference to member latency_ret
     */
    inline st& latency_ret()
    {
        return m_latency_ret;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    st m_latency_ret;
};


/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in request samples.
 * @ingroup LATENCY
 */
class user_cpp_DllExport LatencyRequest_union
{
public:

    /*!
     * @brief Default constructor.
     */
    LatencyRequest_union();
    
    /*!
     * @brief Destructor.
     */
    ~LatencyRequest_union();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LatencyRequest_union that will be copied.
     */
    LatencyRequest_union(const LatencyRequest_union &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object LatencyRequest_union that will be copied.
     */
    LatencyRequest_union(LatencyRequest_union &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LatencyRequest_union that will be copied.
     */
    LatencyRequest_union& operator=(const LatencyRequest_union &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object LatencyRequest_union that will be copied.
     */
    LatencyRequest_union& operator=(LatencyRequest_union &&x);
    
    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    int32_t& _d();

    /*!
     * @brief This function copies the value in member latency
     * @param _latency New value to be copied in member latency
     */
    void latency(const Latency_latencyRequest &_latency);

    /*!
     * @brief This function moves the value in member latency
     * @param _latency New value to be moved in member latency
     */
    void latency(Latency_latencyRequest &&_latency);

    /*!
     * @brief This function returns a constant reference to member latency
     * @return Constant reference to member latency
     */
    const Latency_latencyRequest& latency() const;

    /*!
     * @brief This function returns a reference to member latency
     * @return Reference to member latency
     */
    Latency_latencyRequest& latency();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);
    
private:
    int32_t m__d;

    Latency_latencyRequest m_latency;
};

/*!
 * @brief This class represents the structure LatencyRequest that can be used to send/receive requests
 * for the interface Latency.
 * @ingroup LATENCY
 */
class user_cpp_DllExport LatencyRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    LatencyRequest();
    
    /*!
     * @brief Destructor.
     */
    ~LatencyRequest();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LatencyRequest that will be copied.
     */
    LatencyRequest(const LatencyRequest &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object LatencyRequest that will be copied.
     */
    LatencyRequest(LatencyRequest &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency that will be copied.
     */
    LatencyRequest& operator=(const LatencyRequest &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency that will be copied.
     */
    LatencyRequest& operator=(LatencyRequest &&x);

    /*!
     * @brief This method sets the request header information.
     * @param __header Request header.
     */
    inline void _header(const eprosima::rpc::protocol::dds::RequestHeader &__header)
    {
        m__header = __header;
    }

    /*!
     * @brief This method sets the request header information.
     * @param __header Request header.
     */
    inline void _header(eprosima::rpc::protocol::dds::RequestHeader &&__header)
    {
        m__header = std::move(__header);
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline const eprosima::rpc::protocol::dds::RequestHeader& _header() const
    {
        return m__header;
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline eprosima::rpc::protocol::dds::RequestHeader& _header()
    {
        return m__header;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _unio Union.
     */
    inline void unio(const LatencyRequest_union &_unio)
    {
        m_unio = _unio;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _unio Union.
     */
    inline void unio(LatencyRequest_union &&_unio)
    {
        m_unio = std::move(_unio);
    }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline const LatencyRequest_union& unio() const
    {
        return m_unio;
    }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline LatencyRequest_union& unio()
    {
        return m_unio;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::RequestHeader m__header;

    LatencyRequest_union m_unio;
};

/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in reply samples.
 * @ingroup LATENCY
 */
class user_cpp_DllExport LatencyReply_union
{
public:

    /*!
     * @brief Default constructor.
     */
    LatencyReply_union();
    
    /*!
     * @brief Destructor.
     */
    ~LatencyReply_union();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LatencyReply_union that will be copied.
     */
    LatencyReply_union(const LatencyReply_union &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object LatencyReply_union that will be copied.
     */
    LatencyReply_union(LatencyReply_union &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LatencyReply_union that will be copied.
     */
    LatencyReply_union& operator=(const LatencyReply_union &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object LatencyReply_union that will be copied.
     */
    LatencyReply_union& operator=(LatencyReply_union &&x);
    
    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    int32_t& _d();

    /*!
     * @brief This function copies the value in member latency
     * @param _latency New value to be copied in member latency
     */
    void latency(const Latency_latencyReply &_latency);

    /*!
     * @brief This function moves the value in member latency
     * @param _latency New value to be moved in member latency
     */
    void latency(Latency_latencyReply &&_latency);

    /*!
     * @brief This function returns a constant reference to member latency
     * @return Constant reference to member latency
     */
    const Latency_latencyReply& latency() const;

    /*!
     * @brief This function returns a reference to member latency
     * @return Reference to member latency
     */
    Latency_latencyReply& latency();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);
    
private:
    int32_t m__d;

    Latency_latencyReply m_latency;
};

/*!
 * @brief This class represents the structure LatencyReply that can be used to send/receive replies
 * for the interface Latency.
 * @ingroup LATENCY
 */
class user_cpp_DllExport LatencyReply
{
public:

    /*!
     * @brief Default constructor.
     */
    LatencyReply();
    
    /*!
     * @brief Destructor.
     */
    ~LatencyReply();
    
    /*
     * @brief Copy constructor.
     * @param x Reference to the object LatencyReply that will be copied.
     */
    LatencyReply(const LatencyReply &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object LatencyReply that will be copied.
     */
    LatencyReply(LatencyReply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency that will be copied.
     */
    LatencyReply& operator=(const LatencyReply &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency that will be copied.
     */
    LatencyReply& operator=(LatencyReply &&x);

    /*!
     * @brief This method sets the reply header information.
     * @param __header Reply header.
     */
    inline void _header(const eprosima::rpc::protocol::dds::ReplyHeader &__header)
    {
        m__header = __header;
    }

    /*!
     * @brief This method sets the reply header information.
     * @param __header Reply header.
     */
    inline void _header(eprosima::rpc::protocol::dds::ReplyHeader &&__header)
    {
        m__header = std::move(__header);
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline const eprosima::rpc::protocol::dds::ReplyHeader& _header() const
    {
        return m__header;
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline eprosima::rpc::protocol::dds::ReplyHeader& _header()
    {
        return m__header;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _unio Union.
     */
    inline void unio(const LatencyReply_union &_unio)
    {
        m_unio = _unio;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _unio Union.
     */
    inline void unio(LatencyReply_union &&_unio)
    {
        m_unio = std::move(_unio);
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline const LatencyReply_union& unio() const
    {
        return m_unio;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline LatencyReply_union& unio()
    {
        return m_unio;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::ReplyHeader m__header;

    LatencyReply_union m_unio;
};

#endif // _Latency_TOPICS_H_