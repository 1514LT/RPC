#
# Autoconf script RPCDDS
#

#
# Define variables for the RPCDDS version number.
#
m4_define([version_major],[1])
m4_define([version_minor],[0])
m4_define([version_micro],[1])

AC_INIT([rpcdds], [version_major.version_minor.version_micro], [support@eprosima.com], [eProsima RPC over DDS], [http://eprosima.com/])
CONFIG_ARGS="$*"
AC_SUBST(CONFIG_ARGS)

#Minimum autoconf version we require.
AC_PREREQ([2.59])

AM_INIT_AUTOMAKE([1.10 no-define foreign subdir-objects])

AC_CHECK_HEADER([fastcdr/config.h],
	[AC_MSG_NOTICE([Found eProsima Fast CDR])],
	[AC_MSG_ERROR([Could not find eProsima Fast CDR])],
	[])

AC_ARG_WITH([fastrtps],
        AS_HELP_STRING([--without-fastrtps], [Disables the compilation against eProsima Fast RTPS]))

AS_IF([test "x$with_fastrtps" = xno],
    [AC_CHECK_HEADER([fastrtps/config.h],
	    [AC_MSG_NOTICE([Found eProsima Fast RTPS])
         AC_DEFINE([RPC_WITH_FASTRTPS], [1], [Defined if building agaist eProsima Fast RTPS])],
	    [AC_MSG_ERROR([Could not find eProsima Fast RTPS])],
	    [])],
    [AC_DEFINE([RPC_WITH_FASTRTPS], [0], [Defined if building agaist eProsima Fast RTPS])])

AC_ARG_WITH([rtidds],
        AS_HELP_STRING([--with-rtidds], [Enables the compilation against RTI DDS]))

AS_IF([test "x$with_rtidds" = xyes],
    [AC_CHECK_HEADER([$NDDSHOME/include/ndds/ndds_version.h],
	    [AC_MSG_NOTICE([Found RTI DDS])
         AC_DEFINE([RPC_WITH_RTIDDS], [1], [Defined if building agaist RTI DDS])],
	    [AC_MSG_ERROR([Could not find RTI DDS. Set NDDSHOME environment variable])],
	    [])],
    [AC_DEFINE([RPC_WITH_RTIDDS], [0], [Defined if building agaist RTI DDS])])

# Makes version available in config.h
AC_DEFINE(RPC_VERSION_MAJOR, version_major, [rpcdds version major])
AC_DEFINE(RPC_VERSION_MINOR, version_minor, [rpcdds version minor])
AC_DEFINE(RPC_VERSION_MICRO, version_micro, [rpcdds version micro])

# Check stdcxx
AX_CXX_COMPILE_STDCXX_11(,optional)

# Check endianess
AC_C_BIGENDIAN(
  AC_DEFINE(__BIG_ENDIAN__, 1, [machine is bigendian]),
  AC_DEFINE(__BIG_ENDIAN__, 0, [machine is littleendian]),
  AC_MSG_ERROR(unknown endianess),
  AC_MSG_ERROR(universial endianess not supported)
)

AX_BOOST_BASE([1.53],
	AC_MSG_NOTICE([Found Boost]),
	AC_MSG_ERROR([Could not find Boost]))
AX_BOOST_SYSTEM
AX_BOOST_THREAD
AX_BOOST_DATE_TIME

# Check for libraries used in the main build process
AC_PROG_CXX
AC_PROG_CPP

# Init libtool
AC_CONFIG_MACRO_DIR([m4])
LT_INIT

AC_CONFIG_HEADERS(include/rpcdds/config.h:include/rpcdds/config.h.in)
AC_CONFIG_FILES([Makefile
                 include/Makefile
                 src/cpp/Makefile
                 .bin/rpcddsgen])

AC_OUTPUT
