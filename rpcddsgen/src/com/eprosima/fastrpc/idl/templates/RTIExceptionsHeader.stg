group RTIExceptionsHeader;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "Exceptions.h"], description=["TODO This header file contains the declaration of common types in ", ctx.filename, ".idl"])$

#ifndef _$ctx.filename;format="toUpper"$EXCEPTIONS_H_
#define _$ctx.filename;format="toUpper"$EXCEPTIONS_H_

#include "rpcdds/exceptions/UserException.h"
#include "$ctx.filename$Support.h"

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$EXCEPTIONS_H_
>>

module(ctx, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
namespace $interface.name$
{
    $export_list$
}
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<
/*!
 * @brief This class implementes the user exception $exception.scopedname$
 * @ingroup $ctx.trimfilename$
 */
class RPCDDSUSERDllExport $exception.name$ : public eprosima::rpcdds::exception::UserException
{
public:
    
	$exception.name$();

	$exception.name$(const $exception.name$ &ex);

	$exception.name$($exception.name$&& ex);

	$exception.name$& operator=(const $exception.name$ &ex);

	$exception.name$& operator=($exception.name$&& ex);
	
	virtual ~$exception.name$() throw();

	virtual void raise() const;
	
	// Exception members
	$exception.members : { member | $member.typecode.cppTypename$ $member.name$$if(member.typecode.isType_f)$$member.typecode.arrayExtension$$endif$; }; separator="\n"$
};

>>

operation(ctx, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>
