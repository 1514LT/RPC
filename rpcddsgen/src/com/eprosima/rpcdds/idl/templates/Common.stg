group Common;

fileHeader(file, description) ::= <<
/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file $file$
 * $description$
 *
 * This file was generated by the tool rpcddsgen.
 */
>>

paramRetType(typecode) ::= <<
$if(typecode)$
$typecode.typename$
$else$
void
$endif$
>>

paramTypeByValue(typecode) ::= <<
$if(typecode.primitiveInArguments)$
$if(typecode.isType_d)$const $endif$$typecode.typename$
$else$
const $typecode.typename$&
$endif$
>>

paramTypeByRef(typecode) ::= <<
$typecode.typename$&
>>

paramDeclsByValue(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param |/*$param.comment$*/ $paramTypeByValue(typecode=param.typecode)$ $param.name$}; separator=", "$
>>

paramDeclsByRef(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param |/*$param.comment$*/ $paramTypeByRef(typecode=param.typecode)$ $param.name$}; separator=", "$
>>

paramDeclsOnlyOutByRef(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param | /*$param.comment$*/ $if(param.output)$$paramTypeByRef(typecode=param.typecode)$$else$$paramTypeByValue(typecode=param.typecode)$$endif$ $param.name$}; separator=", "$
>>

memberInit(member) ::= <<
$if(member)$
$if(member.typecode.primitiveInArguments)$
$member.name$ $member.typecode.initialValue$;
$else$
$memberComplexInit(...)$
$endif$
$endif$
>>

// TODO Se necesita?
varDecl(variable, create) ::= <<
$if(variable)$
$if(variable.typecode.primitiveInArguments)$
$variable.typecode.typename$  $variable.name$ $variable.typecode.initialValue$;
$else$
$varComplexDecl(...)$
$endif$
$endif$
>>

varDel(variable) ::= <<
$if(variable)$
$if(variable.typecode.primitiveInArguments)$
$if(variable.typecode.isType_d)$
$varStringDel(name=variable.name)$
$endif$
$else$
$varComplexDel(...)$
$endif$
$endif$
>>

extractParams(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param | $param.name$};separator=", "$
>>

/**** NEW OUR_TYPES ****/

// TODO Todos los tipos. MEJORAR. size of 1 no deberia generar alignment.
max_serialized_size(param, var) ::= <<
$if(param.typecode.primitive)$
$var$ += $param.typecode.size$ + eprosima::Cdr::alignment($var$, $param.typecode.size$);
$else$
$endif$
>>

// TODO Todos los tipos. MEJORAR. size of 1 no deberia generar alignment.
serialized_size(param, var) ::= <<
$if(param.typecode.primitive)$
$var$ += $param.typecode.size$ + eprosima::Cdr::alignment($var$, $param.typecode.size$);
$else$
$endif$
>>

basicTypeInitialValues ::= [
        "type_5":"0.0",
        "type_6":"0.0",
        "type_13":"0.0",
        "type_1":"0",
        "type_2":"0",
        "type_11":"0",
        "type_3":"0",
        "type_4":"0",
        "type_12":"0",
        "type_8":"0",
        "type_14":"0",
        "type_7":"false",
        "type_9":"0",
        default: // not basic type.
]
