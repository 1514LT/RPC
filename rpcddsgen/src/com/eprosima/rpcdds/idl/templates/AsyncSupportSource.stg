group AsyncSupportSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "AsyncSupport.cxx"], description=["This source file contains functionality to use asynchronous calls for all interfaces."])$

#include "$ctx.filename$Proxy.h"
#include "$ctx.filename$AsyncSupport.h"
#include "exceptions/ServerInternalException.h"
$ReqRepIncludes(filename=ctx.filename)$

$definitions; separator="\n"$
>>

module(module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

operation(ctx, operation, param_list) ::= <<
$if(!operation.oneway)$
$operation.parent.name$_$operation.name$Task::$operation.parent.name$_$operation.name$Task($operation.parent.name$_$operation.name$CallbackHandler &obj,
   eProsima::RPCDDS::Client *client) : AsyncTask(client), m_obj(obj)
{
    $varComplexInitializeT(typeName=[operation.parent.name, "_", operation.name, "Reply"], name="m_reply")$
}

$operation.parent.name$_$operation.name$Task::~$operation.parent.name$_$operation.name$Task()
{
    $varComplexDelT(typeName=[operation.parent.name, "_", operation.name, "Reply"], name="m_reply")$
}

$operation.parent.name$_$operation.name$CallbackHandler& $operation.parent.name$_$operation.name$Task::getObject()
{
    return m_obj;
}

void* $operation.parent.name$_$operation.name$Task::getReplyInstance()
{
    return &m_reply;
}

void $operation.parent.name$_$operation.name$Task::execute()
{  
    $operation.outputparam : {param | $varDecl(variable=param)$}; separator="\n"$
    $if(operation.rettypeparam)$
    $varDecl(variable=operation.rettypeparam)$
    $endif$
    eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
    
    $operation.parent.name$_$operation.name$ReplyUtils::extractTypeData(m_reply, retcode$extractParams(params=[operation.outputparam, operation.rettypeparam], separatorInicial=", ")$);
        
    if(retcode == eProsima::RPCDDS::OPERATION_SUCCESSFUL)
    {
        getObject().$operation.name$($extractParams(params=[operation.outputparam, operation.rettypeparam])$);
    }
    else
    {
        if(retcode == eProsima::RPCDDS::SERVER_INTERNAL_ERROR)
            getObject().on_exception(eProsima::RPCDDS::ServerInternalException(m_reply.header.rpcddsRetMsg$stringPointerConst()$));
    }
}

void $operation.parent.name$_$operation.name$Task::on_exception(const eProsima::RPCDDS::SystemException &ex)
{
    getObject().on_exception(ex);
}

$endif$
>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>