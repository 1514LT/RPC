/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************/

group TopicsSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "Topics.cpp"], description=["This source file contains the implementation of topics generated using operations in the IDL file."])$

#include "$ctx.filename$Topics.h"

#include "fastcdr/Cdr.h"

$definitions; separator="\n"$

>>

module(ctx, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$operation.parent.scopedname$_$operation.name$Request::$operation.parent.name$_$operation.name$Request()
$parameters_default_init(operation.inputparam)$
{
}

$operation.parent.scopedname$_$operation.name$Request::~$operation.parent.name$_$operation.name$Request()
{
}

$operation.parent.scopedname$_$operation.name$Request::$operation.parent.name$_$operation.name$Request(const $operation.parent.name$_$operation.name$Request &x)
: m__header(x.m__header)$parameters_copy_init(operation.inputparam)$
{
}

$operation.parent.scopedname$_$operation.name$Request::$operation.parent.name$_$operation.name$Request($operation.parent.name$_$operation.name$Request &&x)
: m__header(std::move(x.m__header))$parameters_move_init(operation.inputparam)$
{
}

$operation.parent.scopedname$_$operation.name$Request& $operation.parent.scopedname$_$operation.name$Request::operator=(const $operation.parent.scopedname$_$operation.name$Request &x)
{
    m__header = x.m__header;
    $operation.inputparam :{ param |$parameters_copy_assigment(param)$;}; separator="\n"$
    
    return *this;
}

$operation.parent.scopedname$_$operation.name$Request& $operation.parent.scopedname$_$operation.name$Request::operator=($operation.parent.scopedname$_$operation.name$Request &&x)
{
    m__header = std::move(x.m__header);
    $operation.inputparam :{ param |$parameters_move_assigment(param)$;}; separator="\n"$
    
    return *this;
}

size_t $operation.parent.scopedname$_$operation.name$Request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;
    current_align +=  eprosima::rpcdds::protocol::dds::RequestHeader::getMaxCdrSerializedSize(current_align);
            
    $operation.inputparam : { param |$max_serialized_size(ctx=ctx, typecode=param.typecode, var="current_align")$}; separator="\n"$

    return current_align;
}

size_t $operation.parent.scopedname$_$operation.name$Request::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Header

    $operation.inputparam : { param |$serialized_size(param=param, var="current_align")$}; separator="\n"$

    return current_align;
}

$if(!operation.oneway)$
$operation.parent.scopedname$_$operation.name$Reply::$operation.parent.name$_$operation.name$Reply()
$parameters_default_init([operation.outputparam, operation.rettypeparam])$
{
}

$operation.parent.scopedname$_$operation.name$Reply::~$operation.parent.name$_$operation.name$Reply()
{
}

$operation.parent.scopedname$_$operation.name$Reply::$operation.parent.name$_$operation.name$Reply(const $operation.parent.name$_$operation.name$Reply &x)
: m__header(x.m__header)$parameters_copy_init([operation.outputparam, operation.rettypeparam])$
{
}

$operation.parent.scopedname$_$operation.name$Reply::$operation.parent.name$_$operation.name$Reply($operation.parent.name$_$operation.name$Reply &&x)
: m__header(std::move(x.m__header))$parameters_move_init([operation.outputparam, operation.rettypeparam])$
{
}

$operation.parent.scopedname$_$operation.name$Reply& $operation.parent.scopedname$_$operation.name$Reply::operator=(const $operation.parent.scopedname$_$operation.name$Reply &x)
{
    m__header = x.m__header;
    $[operation.outputparam, operation.rettypeparam] :{ param |$parameters_copy_assigment(param)$;}; separator="\n"$
    
    return *this;
}

$operation.parent.scopedname$_$operation.name$Reply& $operation.parent.scopedname$_$operation.name$Reply::operator=($operation.parent.scopedname$_$operation.name$Reply &&x)
{
    m__header = std::move(x.m__header);
    $[operation.outputparam, operation.rettypeparam] :{ param |$parameters_move_assigment(param)$;}; separator="\n"$
    
    return *this;
}

size_t $operation.parent.scopedname$_$operation.name$Reply::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;
    current_align +=  eprosima::rpcdds::protocol::dds::ReplyHeader::getMaxCdrSerializedSize(current_align);
            
    $[operation.outputparam, operation.rettypeparam] : { param |$max_serialized_size(ctx=ctx, typecode=param.typecode, var="current_align")$}; separator="\n"$

    return current_align;
}

size_t $operation.parent.scopedname$_$operation.name$Reply::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Header

    $operation.inputparam : { param |$serialized_size(param=param, var="current_align")$}; separator="\n"$

    return current_align;
}
$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

type_declarator(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>

/***** Utils *****/

parameters_default_init(parameters) ::= <<
$if(parameters)$: $parameters:{ param |$parameter_default_init(param)$}; separator=", "$$endif$
>>

// TODO Juntar con TypesSource.stg y TypesHeaders.stg de FastBuffers.
parameter_default_init(param) ::= <<
$if(param.typecode.primitive)$
m_$param.name$($param.typecode.initialValue$)
$else$
m_$param.name$()
$endif$
>>

parameters_copy_init(parameters) ::= <<
$if(parameters)$, $parameters:{ param |m_$param.name$(x.m_$param.name$)}; separator=", "$$endif$
>>

parameters_move_init(parameters) ::= <<
$if(parameters)$, $parameters:{ param |m_$param.name$(std::move(x.m_$param.name$))}; separator=", "$$endif$
>>

parameters_copy_assigment(param) ::= <<
m_$param.name$ = x.m_$param.name$;
>>

parameters_move_assigment(param) ::= <<
m_$param.name$ = x.m_$param.name$;
>>
