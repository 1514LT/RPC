group DDSProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "DDSProtocol.h"], description=["This header file contains the declaration of the protocol used to create DDS messages."])$

#ifndef _$ctx.filename;format="toUpper"$_DDS_PROTOCOL_H_
#define _$ctx.filename;format="toUpper"$_DDS_PROTOCOL_H_

#include "$ctx.filename$Protocol.h"
#include "rpcdds/utils/Messages.h"
$ctx.includeDependencies : { include |#include "$include$T.h"$\n$#include "$include$.h"}; separator="\n"$
$if(ctx.projectNeedTypes)$
#include "$ctx.filename$T.h"

$endif$

namespace eprosima
{
    namespace rpcdds
    {
        namespace transport
        {
            namespace dds
            {
                $if(ctx.client)$
                class ProxyProcedureEndpoint;
                $endif$
                $if(ctx.server)$
                class ServerProcedureEndpoint;
                $endif$
                class Transport;
            }
        }
        
        namespace protocol
        {
            namespace dds
            {
                /*!
                 * @brief This class is responsible for serializing and deserializing the requests and responses of this application.
                 *  It uses DDS.
                 */
                class RPCDDSUSERDllExport  $ctx.filename$Protocol : public eprosima::rpcdds::protocol::$ctx.filename$Protocol
                {
                    public:
                    
                       /*!
                        * @brief Default constructor
                        */
                        $ctx.filename$Protocol();
                        
                       /*!
                        * @brief Default destructor
                        */
                        virtual ~$ctx.filename$Protocol();
                    
                       /*!
                        * @brief This method sets the transport for the communications.
                        * @param transport Transport to use
                        * @return True if the assignment is successful, false otherwise
                        */
                        virtual bool setTransport(eprosima::rpcdds::transport::Transport &transport);
                        
                        bool activateInterface(const char* interfaceName);
                        
                        $definitions; separator="\n"$
                        
                    private:
                    
                        eprosima::rpcdds::transport::dds::Transport *m_ddsTransport;
                    
                        $ctx.interfaces : { interface |
                        $interface.operations : { operation |
                        const char* const $interface.formatedScopedname$_$operation.name$_str;
                        
                        $if(ctx.client)$
                        eprosima::rpcdds::transport::dds::ProxyProcedureEndpoint *$interface.formatedScopedname$_$operation.name$_pe;
                        $endif$
                        
                        $if(ctx.server)$
                        eprosima::rpcdds::transport::dds::ServerProcedureEndpoint *$interface.formatedScopedname$_$operation.name$_se;
                        $endif$
                        
                        }; separator="\n"$
                        }; separator="\n"$
                };
            } // namespace dds
        } // namespace protocol
    } // namespace rpcdds
} // namespace eprosima

#endif // _$ctx.filename;format="toUpper"$_DDS_PROTOCOL_H_
>>

module(ctx, module, definition_list) ::= <<
$definition_list$

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$if(ctx.client)$
/*!
 * @brief This method implements the proxy part of the protocol for the operation $operation.name$
 */
$paramRetType(operation.rettype)$ $operation.parent.formatedScopedname$_$operation.name$($paramDeclsOnlyOutByRef(params=operation.parameters)$);
$endif$

$if(ctx.server)$
/*!
 * @brief This method implements the server part of the protocol for the operation $operation.name$
 */
static void $operation.parent.formatedScopedname$_$operation.name$_serve(eprosima::rpcdds::protocol::Protocol &protocol,
    void *data , eprosima::rpcdds::transport::Endpoint *endpoint);
$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

type_declarator(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>
