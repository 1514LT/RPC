/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************/

group TopicsPluginSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "TopicsPlugin.cpp"], description=["TODO This header file contains the declaration of topics generated using operations in the IDL file."])$

#include "$ctx.filename$TopicsPlugin.h"
#include "rpcdds/protocols/dds/MessageHeaderPlugin.h"

#include "fastcdr/Cdr.h"
#include "fastcdr/exceptions/BadParamException.h"
#include "fastcdr/exceptions/NotEnoughMemoryException.h"

$definitions; separator="\n"$

>>

module(ctx, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
// Request operations

const char *$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::m_typename = "$operation.parent.scopedname$_$operation.name$Request";

const char* $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_typename()
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_typename\n");
    return m_typename;
}

$operation.parent.scopedname$_$operation.name$Request*
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::create_data(void)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::create_data\n");
    $operation.parent.scopedname$_$operation.name$Request *request = new $operation.parent.scopedname$_$operation.name$Request();
    return request;
}

void 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::destroy_data(
    $operation.parent.scopedname$_$operation.name$Request *sample)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::destroy_data\n");
    if(sample != NULL)
        delete sample;
}

void 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::copy_data(
    $operation.parent.name$_$operation.name$Request *dst,
    const $operation.parent.name$_$operation.name$Request *src)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::copy_data\n");
    *dst = *src;
}

unsigned int 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_max_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_max_size\n");
    unsigned int initial_alignment = current_alignment;

    unsigned int encapsulation_size = current_alignment;

    if (include_encapsulation) {

        if (!RTICdrEncapsulation_validEncapsulationId(encapsulation_id)) {
            return 1;
        }

        RTICdrStream_getEncapsulationSize(encapsulation_size);
        encapsulation_size -= current_alignment;
        current_alignment = 0;
        initial_alignment = 0;

    }

    current_alignment += $operation.parent.scopedname$_$operation.name$Request::getMaxCdrSerializedSize(current_alignment);

    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    } 

    printf("Max ser size: %u\n", current_alignment - initial_alignment);
    return current_alignment - initial_alignment;
}

unsigned int
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment,
    const $operation.parent.scopedname$_$operation.name$Request * sample)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_size\n");
    /* TODO
    unsigned int initial_alignment = current_alignment;

    unsigned int encapsulation_size = current_alignment;

    if (include_encapsulation) {

        if (!RTICdrEncapsulation_validEncapsulationId(encapsulation_id)) {
            return 1;
        }

        RTICdrStream_getEncapsulationSize(encapsulation_size);
        encapsulation_size -= current_alignment;
        current_alignment = 0;
        initial_alignment = 0;

    }


    current_alignment += RequestHeaderPlugin::get_serialized_sample_size(
        endpoint_data,RTI_FALSE, encapsulation_id, 
        current_alignment, &sample->header);
            

    current_alignment += RTICdrType_getOctetMaxSizeSerialized(
        current_alignment);
            

    current_alignment += RTICdrType_getOctetMaxSizeSerialized(
        current_alignment);
            

    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }

    return current_alignment - initial_alignment;
    */

    return sample->getSerializedSize(current_alignment);
}

unsigned int 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_min_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_min_size\n");
    // TODO
    return 0;
}

PRESTypePluginParticipantData 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_participant_attached(
    void *registration_data, 
    const struct PRESTypePluginParticipantInfo *participant_info,
    RTIBool top_level_registration, 
    void *container_plugin_context,
    RTICdrTypeCode *typeCode)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_participant_attached\n");
    return PRESTypePluginDefaultParticipantData_new(participant_info);
}

void
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_participant_detached(
    PRESTypePluginParticipantData participant_data)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_participant_detached\n");
    PRESTypePluginDefaultParticipantData_delete(participant_data);
}

PRESTypePluginEndpointData 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_endpoint_attached(
    PRESTypePluginParticipantData participant_data,
    const struct PRESTypePluginEndpointInfo *endpoint_info,
    RTIBool top_level_registration, 
    void *container_plugin_context)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_endpoint_attached\n");
    PRESTypePluginEndpointData epd = NULL;
    unsigned int serializedSampleMaxSize;

    epd = PRESTypePluginDefaultEndpointData_new(
            participant_data,
            endpoint_info,
            (PRESTypePluginDefaultEndpointDataCreateSampleFunction)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::create_data,
            (PRESTypePluginDefaultEndpointDataDestroySampleFunction)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::destroy_data,
            NULL, NULL);

    if(epd != NULL)
    {
        if(endpoint_info->endpointKind == PRES_TYPEPLUGIN_ENDPOINT_WRITER)
        {
            serializedSampleMaxSize = $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_max_size(
                    epd, RTI_FALSE, RTI_CDR_ENCAPSULATION_ID_CDR_BE, 0);

            PRESTypePluginDefaultEndpointData_setMaxSizeSerializedSample(epd, serializedSampleMaxSize);

            if(PRESTypePluginDefaultEndpointData_createWriterPool(
                        epd,
                        endpoint_info,
                        (PRESTypePluginGetSerializedSampleMaxSizeFunction)
                        $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_max_size, epd,
                        (PRESTypePluginGetSerializedSampleSizeFunction)
                        $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_size,
                        epd) == RTI_FALSE)
            {
                PRESTypePluginDefaultEndpointData_delete(epd);
                epd = NULL;
            }
        }
    }

    return epd;    
}

void 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_endpoint_detached(
    PRESTypePluginEndpointData endpoint_data)
{  
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_endpoint_detached\n");
    PRESTypePluginDefaultEndpointData_delete(endpoint_data);
}

RTIBool 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::copy_sample(
    PRESTypePluginEndpointData endpoint_data,
    $operation.parent.name$_$operation.name$Request *dst,
    const $operation.parent.name$_$operation.name$Request *src)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::copy_sample\n");
    // TODO exception?
    *dst = *src;
    $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::copy_data(dst, src);
    return RTI_TRUE;
}

RTIBool 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::serialize(
    PRESTypePluginEndpointData endpoint_data,
    const $operation.parent.scopedname$_$operation.name$Request *sample, 
    struct RTICdrStream *stream,    
    RTIBool serialize_encapsulation,
    RTIEncapsulationId encapsulation_id,
    RTIBool serialize_sample, 
    void *endpoint_plugin_qos)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::serialize\n");
    eprosima::FastBuffer buffer(stream->_buffer, stream->_bufferLength);
    eprosima::Cdr cdr(buffer, (eprosima::Cdr::Endianness)stream->_endian, eprosima::Cdr::DDS_CDR);
    cdr.moveAlignmentForward(stream->_relativeBuffer - stream->_buffer);
    cdr.jump(stream->_currentPosition - stream->_buffer);

    if(serialize_encapsulation)
    {
        cdr.changeEndianness((eprosima::Cdr::Endianness)(encapsulation_id & 0x1));
        cdr.serialize_encapsulation();
        cdr.resetAlignment();
    }

    if(serialize_sample)
    {
        try
        {
            cdr << sample->_header();

            $operation.inputparam : { param |$param_serialization(param=param)$}; separator="\n"$
        }
        catch(eprosima::BadParamException ex)
        {
            printf("ERROR<eprosima::BadParamException>: %s\n", ex.what());
            return RTI_FALSE;
        }
        catch(eprosima::NotEnoughMemoryException ex)
        {
            printf("ERROR<eprosima::NotEnoughMemoryException>: %s\n", ex.what());
            return RTI_FALSE;
        }
    }

    stream->_currentPosition = cdr.getCurrentPosition();

    return RTI_TRUE;
}

RTIBool 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::deserialize(
    PRESTypePluginEndpointData endpoint_data,
    $operation.parent.scopedname$_$operation.name$Request **sample,
    RTIBool * drop_sample,
    struct RTICdrStream *stream,   
    RTIBool deserialize_encapsulation,
    RTIBool deserialize_sample, 
    void *endpoint_plugin_qos)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::deserialize\n");
    $operation.parent.scopedname$_$operation.name$Request *_sample = *sample;
    eprosima::FastBuffer buffer(stream->_buffer, stream->_bufferLength);
    eprosima::Cdr cdr(buffer, (eprosima::Cdr::Endianness)stream->_endian, eprosima::Cdr::DDS_CDR);
    cdr.moveAlignmentForward(stream->_relativeBuffer - stream->_buffer);
    cdr.jump(stream->_currentPosition - stream->_buffer);

    if(deserialize_encapsulation)
    {
        cdr.read_encapsulation();
        cdr.resetAlignment();
    }

    if(deserialize_sample)
    {
        cdr \>> _sample->_header();

        $operation.inputparam : { param |$param_deserialization(param=param)$}; separator="\n"$
    }

    stream->_currentPosition = cdr.getCurrentPosition();

    return RTI_TRUE;
}

PRESTypePluginKeyKind 
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_key_kind(void)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_key_kind\n");
    return PRES_TYPEPLUGIN_NO_KEY;
}

DDS_TypeCode* $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_typecode()
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_typecode\n");
    static bool is_initialized = false;

    $operation.inputparam : { param |$ddsTypeCodeDecls(name=param.name, typecode=param.typecode)$}; separator="\n"$

    static DDS_TypeCode_Member $operation.parent.name$_$operation.name$Request_g_tc_members[1 + $length(operation.inputparam)$]
    {
        // TODO Add header.
        {
            (char *)"_header",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            0,
            0,
            NULL,
            DDS_BOOLEAN_FALSE,
            DDS_PRIVATE_MEMBER,
            0,
            NULL
        }
        $operation.inputparam : { param |
        ,
        {
            (char *)"$param.name$",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            0,
            0,
            NULL,
            DDS_BOOLEAN_FALSE,
            DDS_PRIVATE_MEMBER,
            0,
            NULL
        }}; separator="\n"$
    };

    static DDS_TypeCode $operation.parent.name$_$operation.name$Request_g_tc =
    {{
         DDS_TK_STRUCT,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)m_typename,
         NULL,
         0,
         0,
         NULL,
         1 + $length(operation.inputparam)$,
         $operation.parent.name$_$operation.name$Request_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        $operation.parent.name$_$operation.name$Request_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)eprosima::rpcdds::protocol::dds::RequestHeaderPlugin::get_typecode();
        $operation.inputparam : { param |$operation.parent.name$_$operation.name$Request_g_tc_members[$i$]._representation._typeCode = (RTICdrTypeCode*)$ddsTypeCodeDefs(name=param.name, typecode=param.typecode)$;}; separator="\n"$
        is_initialized = true;
    }

    return &$operation.parent.name$_$operation.name$Request_g_tc;
}

struct PRESTypePlugin *$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::new_plugin(void)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::new_plugin\n");
    struct PRESTypePlugin *plugin = NULL;
    const struct PRESTypePluginVersion PLUGIN_VERSION = PRES_TYPE_PLUGIN_VERSION_2_0;

    RTIOsapiHeap_allocateStructure(&plugin, struct PRESTypePlugin);

    if (plugin != NULL)
    {
        plugin->version = PLUGIN_VERSION;

        /* set up parent's function pointers */
        plugin->onParticipantAttached =
            (PRESTypePluginOnParticipantAttachedCallback)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_participant_attached;
        plugin->onParticipantDetached =
            (PRESTypePluginOnParticipantDetachedCallback)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_participant_detached;
        plugin->onEndpointAttached =
            (PRESTypePluginOnEndpointAttachedCallback)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_endpoint_attached;
        plugin->onEndpointDetached =
            (PRESTypePluginOnEndpointDetachedCallback)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::on_endpoint_detached;

        plugin->copySampleFnc =
            (PRESTypePluginCopySampleFunction)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::copy_sample;
        plugin->createSampleFnc =
            (PRESTypePluginCreateSampleFunction)
            PRESTypePluginDefaultEndpointData_createSample;
        plugin->destroySampleFnc =
            (PRESTypePluginDestroySampleFunction)
            PRESTypePluginDefaultEndpointData_deleteSample;

        plugin->serializeFnc =
            (PRESTypePluginSerializeFunction)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::serialize;
        plugin->deserializeFnc =
            (PRESTypePluginDeserializeFunction)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::deserialize;
        plugin->getSerializedSampleMaxSizeFnc =
            (PRESTypePluginGetSerializedSampleMaxSizeFunction)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_max_size;
        plugin->getSerializedSampleMinSizeFnc =
            (PRESTypePluginGetSerializedSampleMinSizeFunction)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_min_size;


        plugin->getSampleFnc =
            (PRESTypePluginGetSampleFunction)
            PRESTypePluginDefaultEndpointData_getSample;

        plugin->returnSampleFnc =
            (PRESTypePluginReturnSampleFunction)
            PRESTypePluginDefaultEndpointData_returnSample;

        plugin->getKeyKindFnc =
            (PRESTypePluginGetKeyKindFunction)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_key_kind;


        /* These functions are only used for keyed types. As this is not a keyed
           type they are all set to NULL
         */
        plugin->serializeKeyFnc = NULL;
        plugin->deserializeKeyFnc = NULL;
        plugin->getKeyFnc = NULL;
        plugin->returnKeyFnc = NULL;
        plugin->instanceToKeyFnc = NULL;
        plugin->keyToInstanceFnc = NULL;
        plugin->getSerializedKeyMaxSizeFnc = NULL;
        plugin->instanceToKeyHashFnc = NULL;
        plugin->serializedSampleToKeyHashFnc = NULL;
        plugin->serializedKeyToKeyHashFnc = NULL;

        plugin->typeCode =  (struct RTICdrTypeCode *)$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_typecode();

        plugin->languageKind = PRES_TYPEPLUGIN_DDS_TYPE; 

        /* Serialized buffer */
        plugin->getBuffer = 
            (PRESTypePluginGetBufferFunction)
            PRESTypePluginDefaultEndpointData_getBuffer;
        plugin->returnBuffer = 
            (PRESTypePluginReturnBufferFunction)
            PRESTypePluginDefaultEndpointData_returnBuffer;
        plugin->getSerializedSampleSizeFnc =
            (PRESTypePluginGetSerializedSampleSizeFunction)
            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::get_serialized_sample_size;

        plugin->endpointTypeName = m_typename;

        return plugin;
    }

    return NULL;
}

void
$operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::delete_plugin(struct PRESTypePlugin *plugin)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::delete_plugin\n");
    RTIOsapiHeap_freeStructure(plugin);
}

bool $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::register_type(DDSDomainParticipant *participant, const char *type_name)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::register_type\n");
    bool returnedValue = false;
    struct PRESTypePlugin *typeDDSPlugin = NULL;
    static DDSTypeSupport *typePlugin = NULL;

    if(participant != NULL)
    {
        typeDDSPlugin = $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::new_plugin();

        if(typeDDSPlugin != NULL)
        {
            if(typePlugin == NULL)
            {
                typePlugin = new $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin();
            }

            typeDDSPlugin->_userBuffer = (PRESWord*)typePlugin;

            if(DDS_DomainParticipant_register_type(participant->get_c_domain_participantI(), type_name, typeDDSPlugin, NULL) == DDS_RETCODE_OK)
                returnedValue = true;

            $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::delete_plugin(typeDDSPlugin);
        }
    }

    return returnedValue;
}

DDSDataReader* $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::create_datareaderI(DDSDataReader* dataReader)
{
    return new $operation.parent.scopedname$Plugin::$operation.name$RequestDataReader(dataReader);
}

DDS_ReturnCode_t $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::destroy_datareaderI(DDSDataReader* dataReader)
{
    delete ($operation.parent.scopedname$Plugin::$operation.name$RequestDataReader*)dataReader;
    return DDS_RETCODE_OK;
}

DDSDataWriter* $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::create_datawriterI(DDSDataWriter* dataWriter)
{
    return new $operation.parent.scopedname$Plugin::$operation.name$RequestDataWriter(dataWriter);
}

DDS_ReturnCode_t $operation.parent.scopedname$Plugin::$operation.name$RequestPlugin::destroy_datawriterI(DDSDataWriter* dataWriter)
{
    delete ($operation.parent.scopedname$Plugin::$operation.name$RequestDataWriter*)dataWriter;
    return DDS_RETCODE_OK;
}

$if(!operation.oneway)$
// Reply operations
const char *$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::m_typename = "$operation.parent.scopedname$_$operation.name$Reply";

const char* $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_typename()
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_typename\n");
    return m_typename;
}

void 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::copy_data(
    $operation.parent.name$_$operation.name$Reply *dst,
    const $operation.parent.name$_$operation.name$Reply *src)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::copy_data\n");
    *dst = *src;
}

$operation.parent.scopedname$_$operation.name$Reply*
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::create_data(void)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::create_data\n");
    $operation.parent.scopedname$_$operation.name$Reply *reply = new $operation.parent.scopedname$_$operation.name$Reply();
    return reply;
}

void 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::destroy_data(
    $operation.parent.scopedname$_$operation.name$Reply *sample)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::destroy_data\n");
    if(sample != NULL)
        delete sample;
}

unsigned int 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_max_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_max_size\n");
    unsigned int initial_alignment = current_alignment;

    unsigned int encapsulation_size = current_alignment;

    if (include_encapsulation) {

        if (!RTICdrEncapsulation_validEncapsulationId(encapsulation_id)) {
            return 1;
        }

        RTICdrStream_getEncapsulationSize(encapsulation_size);
        encapsulation_size -= current_alignment;
        current_alignment = 0;
        initial_alignment = 0;

    }


    current_alignment += $operation.parent.scopedname$_$operation.name$Reply::getMaxCdrSerializedSize(current_alignment);

    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    } 

    printf("Max ser size: %u\n", current_alignment - initial_alignment);
    return current_alignment - initial_alignment;
}

unsigned int
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment,
    const $operation.parent.scopedname$_$operation.name$Reply * sample)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_size\n");
    /* TODO
    unsigned int initial_alignment = current_alignment;

    unsigned int encapsulation_size = current_alignment;

    if (include_encapsulation) {

        if (!RTICdrEncapsulation_validEncapsulationId(encapsulation_id)) {
            return 1;
        }

        RTICdrStream_getEncapsulationSize(encapsulation_size);
        encapsulation_size -= current_alignment;
        current_alignment = 0;
        initial_alignment = 0;

    }


    current_alignment += RequestHeaderPlugin::get_serialized_sample_size(
        endpoint_data,RTI_FALSE, encapsulation_id, 
        current_alignment, &sample->header);
            

    current_alignment += RTICdrType_getOctetMaxSizeSerialized(
        current_alignment);
            

    current_alignment += RTICdrType_getOctetMaxSizeSerialized(
        current_alignment);
            

    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }

    return current_alignment - initial_alignment;
    */

    return sample->getSerializedSize(current_alignment);
}

unsigned int 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_min_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_min_size\n");
    // TODO
    return 0;
}

PRESTypePluginParticipantData 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_participant_attached(
    void *registration_data, 
    const struct PRESTypePluginParticipantInfo *participant_info,
    RTIBool top_level_registration, 
    void *container_plugin_context,
    RTICdrTypeCode *typeCode)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_participant_attached\n");
    return PRESTypePluginDefaultParticipantData_new(participant_info);
}

void
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_participant_detached(
    PRESTypePluginParticipantData participant_data)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_participant_detached\n");
    PRESTypePluginDefaultParticipantData_delete(participant_data);
}

PRESTypePluginEndpointData 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_endpoint_attached(
    PRESTypePluginParticipantData participant_data,
    const struct PRESTypePluginEndpointInfo *endpoint_info,
    RTIBool top_level_registration, 
    void *container_plugin_context)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_endpoint_attached\n");
    PRESTypePluginEndpointData epd = NULL;
    unsigned int serializedSampleMaxSize;

    epd = PRESTypePluginDefaultEndpointData_new(
            participant_data,
            endpoint_info,
            (PRESTypePluginDefaultEndpointDataCreateSampleFunction)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::create_data,
            (PRESTypePluginDefaultEndpointDataDestroySampleFunction)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::destroy_data,
            NULL, NULL);

    if(epd != NULL)
    {
        if(endpoint_info->endpointKind == PRES_TYPEPLUGIN_ENDPOINT_WRITER)
        {
            serializedSampleMaxSize = $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_max_size(
                    epd, RTI_FALSE, RTI_CDR_ENCAPSULATION_ID_CDR_BE, 0);

            PRESTypePluginDefaultEndpointData_setMaxSizeSerializedSample(epd, serializedSampleMaxSize);

            if(PRESTypePluginDefaultEndpointData_createWriterPool(
                        epd,
                        endpoint_info,
                        (PRESTypePluginGetSerializedSampleMaxSizeFunction)
                        $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_max_size, epd,
                        (PRESTypePluginGetSerializedSampleSizeFunction)
                        $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_size,
                        epd) == RTI_FALSE)
            {
                PRESTypePluginDefaultEndpointData_delete(epd);
                epd = NULL;
            }
        }
    }

    return epd;    
}

void 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_endpoint_detached(
    PRESTypePluginEndpointData endpoint_data)
{  
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_endpoint_detached\n");
    PRESTypePluginDefaultEndpointData_delete(endpoint_data);
}

RTIBool 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::copy_sample(
    PRESTypePluginEndpointData endpoint_data,
    $operation.parent.name$_$operation.name$Reply *dst,
    const $operation.parent.name$_$operation.name$Reply *src)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::copy_sample\n");
    $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::copy_data(dst, src);
    return RTI_TRUE;
}

RTIBool 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::serialize(
    PRESTypePluginEndpointData endpoint_data,
    const $operation.parent.scopedname$_$operation.name$Reply *sample, 
    struct RTICdrStream *stream,    
    RTIBool serialize_encapsulation,
    RTIEncapsulationId encapsulation_id,
    RTIBool serialize_sample, 
    void *endpoint_plugin_qos)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::serialize\n");
    eprosima::FastBuffer buffer(stream->_buffer, stream->_bufferLength);
    eprosima::Cdr cdr(buffer, (eprosima::Cdr::Endianness)stream->_endian, eprosima::Cdr::DDS_CDR);
    cdr.moveAlignmentForward(stream->_relativeBuffer - stream->_buffer);
    cdr.jump(stream->_currentPosition - stream->_buffer);

    if(serialize_encapsulation)
    {
        cdr.changeEndianness((eprosima::Cdr::Endianness)(encapsulation_id & 0x1));
        cdr.serialize_encapsulation();
        cdr.resetAlignment();
    }

    if(serialize_sample)
    {
        try
        {
            cdr << sample->_header();

            $[operation.outputparam, operation.rettypeparam] : { param |$param_serialization(param=param)$}; separator="\n"$
        }
        catch(eprosima::BadParamException ex)
        {
            printf("ERROR<eprosima::BadParamException>: %s\n", ex.what());
            return RTI_FALSE;
        }
        catch(eprosima::NotEnoughMemoryException ex)
        {
            printf("ERROR<eprosima::NotEnoughMemoryException>: %s\n", ex.what());
            return RTI_FALSE;
        }
    }

    stream->_currentPosition = cdr.getCurrentPosition();
    return RTI_TRUE;
}

RTIBool 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::deserialize(
    PRESTypePluginEndpointData endpoint_data,
    $operation.parent.scopedname$_$operation.name$Reply **sample,
    RTIBool * drop_sample,
    struct RTICdrStream *stream,   
    RTIBool deserialize_encapsulation,
    RTIBool deserialize_sample, 
    void *endpoint_plugin_qos)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::deserialize\n");
    $operation.parent.scopedname$_$operation.name$Reply *_sample = *sample;
    eprosima::FastBuffer buffer(stream->_buffer, stream->_bufferLength);
    eprosima::Cdr cdr(buffer, (eprosima::Cdr::Endianness)stream->_endian, eprosima::Cdr::DDS_CDR);
    cdr.moveAlignmentForward(stream->_relativeBuffer - stream->_buffer);
    cdr.jump(stream->_currentPosition - stream->_buffer);

    if(deserialize_encapsulation)
    {
        cdr.read_encapsulation();
        cdr.resetAlignment();
    }

    if(deserialize_sample)
    {
        cdr \>> _sample->_header();

        $[operation.outputparam, operation.rettypeparam] : { param |$param_deserialization(param=param)$}; separator="\n"$
    }

    stream->_currentPosition = cdr.getCurrentPosition();
    return RTI_TRUE;
}

PRESTypePluginKeyKind 
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_key_kind(void)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_key_kind\n");
    return PRES_TYPEPLUGIN_NO_KEY;
}

DDS_TypeCode* $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_typecode()
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_typecode\n");
    static bool is_initialized = false;

    $[operation.outputparam, operation.rettypeparam] : { param |$ddsTypeCodeDecls(name=param.name, typecode=param.typecode)$}; separator="\n"$

    static DDS_TypeCode_Member $operation.parent.name$_$operation.name$Reply_g_tc_members[1 + $length([operation.outputparam, operation.rettypeparam])$]
    {
        // TODO Add header.
        {
            (char *)"_header",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            0,
            0,
            NULL,
            DDS_BOOLEAN_FALSE,
            DDS_PRIVATE_MEMBER,
            0,
            NULL
        }
        $[operation.outputparam, operation.rettypeparam] : { param |
        ,
        {
            (char *)"$param.name$",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            0,
            0,
            NULL,
            DDS_BOOLEAN_FALSE,
            DDS_PRIVATE_MEMBER,
            0,
            NULL
        }}; separator="\n"$
    };

    static DDS_TypeCode $operation.parent.name$_$operation.name$Reply_g_tc =
    {{
         DDS_TK_STRUCT,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)m_typename,
         NULL,
         0,
         0,
         NULL,
         1 + $length([operation.outputparam, operation.rettypeparam])$,
         $operation.parent.name$_$operation.name$Reply_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        $operation.parent.name$_$operation.name$Reply_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)eprosima::rpcdds::protocol::dds::ReplyHeaderPlugin::get_typecode();
        $[operation.outputparam, operation.rettypeparam] : { param |$operation.parent.name$_$operation.name$Reply_g_tc_members[$i$]._representation._typeCode = (RTICdrTypeCode*)$ddsTypeCodeDefs(name=param.name, typecode=param.typecode)$;}; separator="\n"$
        is_initialized = true;
    }

    return &$operation.parent.name$_$operation.name$Reply_g_tc;
}

struct PRESTypePlugin *$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::new_plugin(void)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::new_plugin\n");
    struct PRESTypePlugin *plugin = NULL;
    const struct PRESTypePluginVersion PLUGIN_VERSION = PRES_TYPE_PLUGIN_VERSION_2_0;

    RTIOsapiHeap_allocateStructure(&plugin, struct PRESTypePlugin);

    if (plugin != NULL)
    {
        plugin->version = PLUGIN_VERSION;

        /* set up parent's function pointers */
        plugin->onParticipantAttached =
            (PRESTypePluginOnParticipantAttachedCallback)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_participant_attached;
        plugin->onParticipantDetached =
            (PRESTypePluginOnParticipantDetachedCallback)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_participant_detached;
        plugin->onEndpointAttached =
            (PRESTypePluginOnEndpointAttachedCallback)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_endpoint_attached;
        plugin->onEndpointDetached =
            (PRESTypePluginOnEndpointDetachedCallback)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::on_endpoint_detached;

        plugin->copySampleFnc =
            (PRESTypePluginCopySampleFunction)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::copy_sample;
        plugin->createSampleFnc =
            (PRESTypePluginCreateSampleFunction)
            PRESTypePluginDefaultEndpointData_createSample;
        plugin->destroySampleFnc =
            (PRESTypePluginDestroySampleFunction)
            PRESTypePluginDefaultEndpointData_deleteSample;

        plugin->serializeFnc =
            (PRESTypePluginSerializeFunction)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::serialize;
        plugin->deserializeFnc =
            (PRESTypePluginDeserializeFunction)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::deserialize;
        plugin->getSerializedSampleMaxSizeFnc =
            (PRESTypePluginGetSerializedSampleMaxSizeFunction)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_max_size;
        plugin->getSerializedSampleMinSizeFnc =
            (PRESTypePluginGetSerializedSampleMinSizeFunction)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_min_size;


        plugin->getSampleFnc =
            (PRESTypePluginGetSampleFunction)
            PRESTypePluginDefaultEndpointData_getSample;

        plugin->returnSampleFnc =
            (PRESTypePluginReturnSampleFunction)
            PRESTypePluginDefaultEndpointData_returnSample;

        plugin->getKeyKindFnc =
            (PRESTypePluginGetKeyKindFunction)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_key_kind;


        /* These functions are only used for keyed types. As this is not a keyed
           type they are all set to NULL
         */
        plugin->serializeKeyFnc = NULL;
        plugin->deserializeKeyFnc = NULL;
        plugin->getKeyFnc = NULL;
        plugin->returnKeyFnc = NULL;
        plugin->instanceToKeyFnc = NULL;
        plugin->keyToInstanceFnc = NULL;
        plugin->getSerializedKeyMaxSizeFnc = NULL;
        plugin->instanceToKeyHashFnc = NULL;
        plugin->serializedSampleToKeyHashFnc = NULL;
        plugin->serializedKeyToKeyHashFnc = NULL;

        plugin->typeCode =  (struct RTICdrTypeCode *)$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_typecode();

        plugin->languageKind = PRES_TYPEPLUGIN_DDS_TYPE; 

        /* Serialized buffer */
        plugin->getBuffer = 
            (PRESTypePluginGetBufferFunction)
            PRESTypePluginDefaultEndpointData_getBuffer;
        plugin->returnBuffer = 
            (PRESTypePluginReturnBufferFunction)
            PRESTypePluginDefaultEndpointData_returnBuffer;
        plugin->getSerializedSampleSizeFnc =
            (PRESTypePluginGetSerializedSampleSizeFunction)
            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::get_serialized_sample_size;

        plugin->endpointTypeName = m_typename;

        return plugin;
    }

    return NULL;
}

void
$operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::delete_plugin(struct PRESTypePlugin *plugin)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::delete_plugin\n");
    RTIOsapiHeap_freeStructure(plugin);
}

bool $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::register_type(DDSDomainParticipant *participant, const char *type_name)
{
    printf("=> $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::register_type\n");
    bool returnedValue = false;
    struct PRESTypePlugin *typeDDSPlugin = NULL;
    static DDSTypeSupport *typePlugin = NULL;

    if(participant != NULL)
    {
        typeDDSPlugin = $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::new_plugin();

        if(typeDDSPlugin != NULL)
        {
            if(typePlugin == NULL)
            {
                typePlugin = new $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin();
            }

            typeDDSPlugin->_userBuffer = (PRESWord*)typePlugin;

            if(DDS_DomainParticipant_register_type(participant->get_c_domain_participantI(), type_name, typeDDSPlugin, NULL) == DDS_RETCODE_OK)
                returnedValue = true;

            $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::delete_plugin(typeDDSPlugin);
        }
    }

    return returnedValue;
}


DDSDataReader* $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::create_datareaderI(DDSDataReader* dataReader)
{
    return new $operation.parent.scopedname$Plugin::$operation.name$ReplyDataReader(dataReader);
}

DDS_ReturnCode_t $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::destroy_datareaderI(DDSDataReader* dataReader)
{
    delete ($operation.parent.scopedname$Plugin::$operation.name$ReplyDataReader*)dataReader;
    return DDS_RETCODE_OK;
}

DDSDataWriter* $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::create_datawriterI(DDSDataWriter* dataWriter)
{
    return new $operation.parent.scopedname$Plugin::$operation.name$ReplyDataWriter(dataWriter);
}

DDS_ReturnCode_t $operation.parent.scopedname$Plugin::$operation.name$ReplyPlugin::destroy_datawriterI(DDSDataWriter* dataWriter)
{
    delete ($operation.parent.scopedname$Plugin::$operation.name$ReplyDataWriter*)dataWriter;
    return DDS_RETCODE_OK;
}
$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

type_declarator(ctx, typedefs) ::= <<
DDS_TypeCode* $if(typedefs.hasScope)$$typedefs.scope$Plugin::$endif$$typedefs.name$Plugin::get_typecode()
{
    static bool is_initialized = false;

    $ddsTypeCodeDeclsInAlias(ctx=ctx, alias=typedefs)$

    static DDS_TypeCode $typedefs.name$_g_tc =
    {{
         DDS_TK_ALIAS,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"$typedefs.name$",
         NULL,
         0,
         0,
         NULL,
         0,
         NULL,
         DDS_VM_NONE
    }};

    if(!is_initialized)
    {
        $typedefs.name$_g_tc._data._typeCode = (RTICdrTypeCode*)$ddsTypeCodeDefs(name=typedefs.name, typecode=typedefs.contentTypeCode)$;
        is_initialized = true;
    }
    
    return &$typedefs.name$_g_tc;
}
>>

struct_type(ctx, struct) ::= <<
DDS_TypeCode* $if(struct.hasScope)$$struct.scope$Plugin::$endif$$struct.name$Plugin::get_typecode()
{
    static bool is_initialized = false;

    $struct.members : { member |$ddsTypeCodeDecls(name=member.name, typecode=member.typecode)$}; separator="\n"$

    static DDS_TypeCode_Member $struct.name$_g_tc_members[$length(struct.members)$]
    {
        $struct.members : { member |
        {
            (char *)"$member.name$",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            0,
            0,
            NULL,
            DDS_BOOLEAN_FALSE,
            DDS_PRIVATE_MEMBER,
            0,
            NULL
        }}; separator=",\n"$
    };

    static DDS_TypeCode $struct.name$_g_tc =
    {{
         DDS_TK_STRUCT,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"$struct.name$",
         NULL,
         0,
         0,
         NULL,
         $length(struct.members)$,
         $struct.name$_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        $struct.members : { member |$struct.name$_g_tc_members[$i$ - 1]._representation._typeCode = (RTICdrTypeCode*)$ddsTypeCodeDefs(name=member.name, typecode=member.typecode)$;}; separator="\n"$
        is_initialized = true;
    }

    return &$struct.name$_g_tc;
}
>>

union_type(ctx, union) ::= <<
DDS_TypeCode* $if(union.hasScope)$$union.scope$Plugin::$endif$$union.name$Plugin::get_typecode()
{
    static bool is_initialized = false;

    $union.members : { member |$union_member_labels_decl(union=union, member=member)$}; separator="\n"$

    $union.members : { member |$ddsTypeCodeDecls(name=member.name, typecode=member.typecode)$}; separator="\n"$

    static DDS_TypeCode_Member $union.name$_g_tc_members[$length(union.members)$]
    {
        $union.members : { member |
        {
            (char *)"$member.name$",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            $length(member.labels)$,
            $first(member.labels)$,
            $union_member_labels_def(union=union, member=member)$,
            DDS_BOOLEAN_FALSE,
            DDS_PRIVATE_MEMBER,
            0,
            NULL
        }}; separator=",\n"$
    };

    static DDS_TypeCode $union.name$_g_tc =
    {{
         DDS_TK_UNION,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"$union.name$",
         NULL,
         0,
         0,
         NULL,
         $length(union.members)$,
         $union.name$_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        $union.members : { member |$union.name$_g_tc_members[$i$ - 1]._representation._typeCode = (RTICdrTypeCode*)$ddsTypeCodeDefs(name=member.name, typecode=member.typecode)$;}; separator="\n"$

        $union.name$_g_tc._data._typeCode = (RTICdrTypeCode*)$ddsTypeCodeDefs(typecode=union.discriminator)$;

        is_initialized = true;
    }

    return &$union.name$_g_tc;
}
>>

enum_type(ctx, enum) ::= <<
DDS_TypeCode* $if(enum.hasScope)$$enum.scope$Plugin::$endif$$enum.name$Plugin::get_typecode()
{
    static DDS_TypeCode_Member $enum.name$_g_tc_members[$length(enum.members)$]
    {
        $enum.members : { member |
        {
            (char *)"$member.name$",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            $if(enum.hasScope)$$enum.scope$::$endif$$member.name$,
            0,
            0,
            NULL,
            DDS_BOOLEAN_FALSE,
            DDS_PRIVATE_MEMBER,
            0,
            NULL
        }}; separator=",\n"$
    };

    static DDS_TypeCode $enum.name$_g_tc =
    {{
         DDS_TK_ENUM,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"$enum.name$",
         NULL,
         0,
         0,
         NULL,
         $length(enum.members)$,
         $enum.name$_g_tc_members,
         DDS_VM_NONE
    }};
    
    return &$enum.name$_g_tc;
}
>>

/**** Utils ****/

//TODO EL resto de tipos
ddsTypeCodeDecls(name, typecode) ::= <<
$if(!typecode.isType_10)$
$if(typecode.isType_d)$
static DDS_TypeCode $name$_g_tc_string = DDS_INITIALIZE_STRING_TYPECODE($typecode.maxsize$);
$endif$
$if(typecode.isType_e)$
$ddsTypeCodeDecls(name=ctx.newRandomName, typecode=typecode.contentTypeCode)$
static DDS_TypeCode $name$_g_tc_sequence = DDS_INITIALIZE_SEQUENCE_TYPECODE($typecode.maxsize$, (RTICdrTypeCode*)$ddsTypeCodeDefs(name=ctx.lastRandomName, typecode=typecode.contentTypeCode)$);
$endif$
$endif$
>>

ddsTypeCodeDeclsInAlias(ctx, alias) ::= <<
$if(alias.isType_d)$
static DDS_TypeCode $alias.name$_g_tc_string = DDS_INITIALIZE_STRING_TYPECODE($alias.maxsize$);
$endif$
$if(alias.isType_e)$
$ddsTypeCodeDecls(name=ctx.newRandomName, typecode=alias.contentTypeCode)$
static DDS_TypeCode $alias.name$_g_tc_sequence = DDS_INITIALIZE_SEQUENCE_TYPECODE($alias.maxsize$, (RTICdrTypeCode*)$ddsTypeCodeDefs(name=ctx.lastRandomName, typecode=alias.contentTypeCode)$);
$endif$
>>

//TODO EL resto de tipos
ddsTypeCodeDefs(name, typecode) ::= <<
$if(typecode.isType_10)$
$if(typecode.hasScope)$$typecode.scope$Plugin::$endif$$typecode.name$Plugin::get_typecode()
$elseif(typecode.primitive)$
$if(typecode.isType_d)$
&$name$_g_tc_string
$elseif(typecode.isType_c)$
$if(typecode.hasScope)$$typecode.scope$Plugin::$endif$$typecode.name$Plugin::get_typecode()
$else$
&$basicDDSTypeCodeDefs.(typecode.stType)$
$endif$
$else$
$if(typecode.isType_e)$
&$name$_g_tc_sequence
$else$
$if(typecode.hasScope)$$typecode.scope$Plugin::$endif$$typecode.name$Plugin::get_typecode()
$endif$
$endif$
>>

param_serialization(param) ::= <<
$if(param.typecode.maxsize)$
if(sample->$param.name$().$sizeFunction.(param.typecode.stType)$ <= $param.typecode.maxsize$)

$endif$cdr << $serializeCasting(typecode=param.typecode)$sample->$param.name$();
$if(param.typecode.maxsize)$
else
    throw eprosima::BadParamException(std::string("The maximum length was exceeded"));
$endif$
>>

param_deserialization(param) ::= <<
cdr \>> $deserializeCasting(typecode=param.typecode)$_sample->$param.name$();
>>

union_member_labels_decl(union, member) ::= <<
$if(rest(member.labels))$
static DDS_Long $union.name$_g_tc_$member.name$_labels[$length(member.labels)$] = {$member.labels : { label |(DDS_Long)$label$}; separator=", "$};
$endif$
>>

union_member_labels_def(union, member) ::= <<
$if(rest(member.labels))$
$union.name$_g_tc_$member.name$_labels
$else$
NULL
$endif$
>>

basicDDSTypeCodeDefs ::= [
        "type_5":"DDS_g_tc_float",
        "type_6":"DDS_g_tc_double",
        "type_13":"DDS_g_tc_longdouble",
        "type_1":"DDS_g_tc_short",
        "type_2":"DDS_g_tc_long",
        "type_11":"DDS_g_tc_longlong",
        "type_3":"DDS_g_tc_ushort",
        "type_4":"DDS_g_tc_ulong",
        "type_12":"DDS_g_tc_ulonglong",
        "type_8":"DDS_g_tc_char",
        "type_14":"DDS_g_tc_wchar",
        "type_7":"DDS_g_tc_boolean",
        "type_9":"DDS_g_tc_octet",
        default: // not basic type.
]
