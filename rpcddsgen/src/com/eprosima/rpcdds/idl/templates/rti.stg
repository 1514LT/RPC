/* $Id$   *
 * (c) Copyright, eProsima, 2009.                                          *
 * All rights reserved.                                                    *    
 *                                                                         *
 * No duplications, whole or partial, manual or electronic, may be made    *
 * without express written permission.  Any such copies, or                *
 * revisions thereof, must display this notice unaltered.                  *
 * This code contains trade secrets of                                     *
 * eProsima (Proyectos y Sistemas de Mantenimiento S.L.)                   *
 *                                                                         *
 * modification history                                                    *
 * --------------------                                                    *
 * 1.0,29sep09,RodM Created                                                *
 * =====================================================================   *
 */

group main;

memberComplexInit(member) ::= <<
$if(member)$
memset(&$member.name$, 0, sizeof($member.typecode.cppTypename$));
$endif$
>>

memberComplexInitCopy(member, dataname) ::= <<
$if(member)$
$member.typecode.cppTypename$_initialize(&$member.name$);
$member.typecode.cppTypename$_copy(&$member.name$, &$dataname$.$member.name$);
$endif$
>>

memberComplexCopy(member, dataname) ::= <<
$if(member)$
$member.typecode.cppTypename$_copy(&$member.name$, &$dataname$.$member.name$);
$endif$
>>

memberComplexExtract(member, dataname) ::= <<
$if(member)$
$member.typecode.cppTypename$_copy(&$dataname$.$member.name$, &$member.name$);
$endif$
>>

varComplexDecl(variable, create) ::= <<
$if(variable)$
$variable.typecode.cppTypename$ $variable.name$;$if(create)$$\n$memset(&$variable.name$, 0, sizeof($variable.typecode.cppTypename$));$endif$
$endif$
>>

// TODO Â¿Se necesita?
varComplexInitializeT(typeName, name) ::= <<
$typeName$_initialize(&$name$);
>>

varComplexInitialize(variable) ::= <<
$if(variable)$
$variable.typecode.cppTypename$_initialize(&$variable.name$);
$endif$
>>

varComplexDelT(typeName, name) ::= <<$typeName$_finalize(&$name$);>>

varComplexDel(variable) ::= <<$variable.typecode.cppTypename$_finalize(&$variable.name$);>>

varStringDel(name) ::=<<
if($name$ != NULL) free($name$);
>>

ReqRepIncludes(filename) ::= <<
#include "$filename$RequestReplyPlugin.h"
>>

ReqRepRIncludes(filename) ::= <<
#include "$filename$RequestReplySupport.h"
>>

ReqRepSIncludes(filename) ::= <<
#include "$filename$RequestReplySupport.h"
>>

ddsIncludes() ::= <<
#include "ndds_namespace_cpp.h"
>>

reqrepCreation(type, reqrep, name, void, create) ::= <<
$if(create)$$type$$reqrep$* $endif$$name$ = $if(void)$(void*)$endif$$type$$reqrep$TypeSupport::create_data();
>>

reqrepDestruction(type, reqrep, name, void) ::= <<
$type$$reqrep$TypeSupport::delete_data($if(void)$($type$$reqrep$*)$endif$$name$);
>>

reqrepRefFinalize(type, reqrep, name) ::= <<
$type$$reqrep$_finalize(&$name$);
>>

getTypenameOperation(operation, suffix, varname) ::= <<
$varname$ = $operation.parent.scopedname$_$operation.name$$suffix$TypeSupport::get_type_name();
>>

registerTypename(cppTypename, name) ::= <<
$cppTypename$TypeSupport::register_type(m_ddsTransport->getParticipant(), $name$)
>>

preReqIDLDefines(name) ::= <<
>>

preRepIDLDefines(name) ::= <<>>

keyIDLdefine() ::= <<
 //@key
>>

levelIDLdefine() ::= <<//@top-level true>>

nolevelIDLdefine() ::= <<//@top-level false>>

archMakeDefines() ::= <<
 -DRTI_LINUX -DRTI_UNIX
>>

inclMake() ::= <<
 -I\$(NDDSHOME)/include -I\$(NDDSHOME)/include/ndds
>>

inclVS() ::= <<
\$(NDDSHOME)\include;\$(NDDSHOME)\include\ndds;\$(RPCDDSHOME)\include;
>>

libsMake(example, version) ::= <<
 -L\$(NDDSHOME)/lib/$example$ \
       -lnddsc -lnddscore -lnddscpp
>>

libsVS(example) ::= <<
\$(NDDSHOME)\lib\\$example$;\$(RPCDDSHOME)\lib\\$example$
>>
 
preprocessorDefs(conf) ::= <<
WIN32;RTI_WIN32;_CONSOLE;_CRT_SECURE_NO_WARNINGS;$if(conf.dll)$NDDS_DLL_VARIABLE;WIN32_LEAN_AND_MEAN;$endif$$if(conf.debug)$_DEBUG$else$NDEBUG$endif$
>>

preprocessorTypesLibDefs(conf) ::= <<
$if(conf.dll)$NDDS_USER_DLL_EXPORT;$endif$
>>

dependencies(conf) ::= <<
nddscpp$if(conf.dll)$$else$z$endif$$if(conf.debug)$d$endif$.lib; nddsc$if(conf.dll)$$else$z$endif$$if(conf.debug)$d$endif$.lib; nddscore$if(conf.dll)$$else$z$endif$$if(conf.debug)$d$endif$.lib
>>

stringPointer() ::= <<>>

charCasting() ::= <<
(char*)
>>

charConstCasting() ::= <<
>>

bigObjOption() ::= <<
>>

unsetReply() ::= <<
memset((char*)&replyData + sizeof(replyData.header), 0, sizeof(replyData) - sizeof(replyData.header));
>>

/***** NEW OUR_TYPES *****/

paramTypeByValue(typecode) ::= <<
$if(typecode.primitive)$
$if(typecode.isType_d)$
$typecode.cppTypename$
$else$
const $typecode.cppTypename$
$endif$
$else$
const $typecode.cppTypename$&
$endif$
>>

varDecl(variable, create) ::= <<
$if(variable)$
$if(variable.typecode.primitive)$
$variable.typecode.cppTypename$  $variable.name$ = $variable.typecode.initialValue$;
$else$
$varComplexDecl(...)$
$endif$
$endif$
>>

varDel(variable) ::= <<
$if(variable)$
$if(variable.typecode.primitive)$
$if(variable.typecode.isType_d)$
$varStringDel(name=variable.name)$
$endif$
$else$
$varComplexDel(...)$
$endif$
$endif$
>>
