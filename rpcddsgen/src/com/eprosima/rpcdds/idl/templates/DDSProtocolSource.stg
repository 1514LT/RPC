group DDSProtocolSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "DDSProtocol.cxx"], description=["This source file contains the definition of the protocol used to create DDS messages."])$

#include "$ctx.filename$DDSProtocol.h"
#include "transports/Transport.h"
#include "transports/dds/ProxyTransport.h"
#include "exceptions/Exceptions.h"
$ReqRepSIncludes(filename=ctx.filename)$

using namespace eprosima::rpcdds;
using namespace ::protocol::dds;
using namespace ::transport;
using namespace ::exception;

typedef struct encapsulation
{
    const char *name;
    void *data;
} encapsulation;

$ctx.filename$Protocol::$ctx.filename$Protocol() : ::protocol::$ctx.filename$Protocol()
$ctx.interfaces : { interface |
$interface.operations : { operation |
, $interface.formatedScopedname$_$operation.name$_str("$interface.formatedScopedname$_$operation.name$")
}; separator="\n"$
}; separator="\n"$
{
}

$ctx.filename$Protocol::~$ctx.filename$Protocol()
{
}

bool $ctx.filename$Protocol::setTransport(Transport &transport)
{
    const char *requesttypeName = NULL, *replytypeName = NULL;
    
    if(strcmp(transport.getType(), "DDS") == 0)
    {
        eprosima::rpcdds::transport::dds::Transport &ddstransport = dynamic_cast<eprosima::rpcdds::transport::dds::Transport&>(transport);
        
        ddstransport.initialize();
        
        $ctx.interfaces : { interface |
        $interface.operations : { operation |
        
        $getTypename(typename=[interface.scopedname,"_",operation.name,"Request"], name="requesttypeName")$

        if($registerTypename(typename=[interface.scopedname,"_",operation.name,"Request"], name="requesttypeName")$ != DDS::RETCODE_OK)
        {
            return false;
        }
        
        $getTypename(typename=[interface.scopedname,"_",operation.name,"Reply"], name="replytypeName")$

        if($registerTypename(typename=[interface.scopedname,"_",operation.name,"Reply"], name="replytypeName")$ != DDS::RETCODE_OK)
        {
            return false;
        }
        
        if(ddstransport.createProcedureEndpoint($interface.formatedScopedname$_$operation.name$_str,
            (ddstransport.getBehaviour() == ::transport::dds::PROXY_BEHAVIOUR ? requesttypeName : $if(operation.oneway)$NULL$else$replytypeName$endif$),
            (ddstransport.getBehaviour() == ::transport::dds::PROXY_BEHAVIOUR ? $if(operation.oneway)$NULL$else$replytypeName$endif$ : requesttypeName),
            (ddstransport.getBehaviour() == ::transport::dds::PROXY_BEHAVIOUR ?
                (::transport::dds::Transport::Initialize_data)$interface.scopedname$_$operation.name$ReplyTypeSupport::initialize_data :
                (::transport::dds::Transport::Initialize_data)$interface.scopedname$_$operation.name$RequestTypeSupport::initialize_data),
            (ddstransport.getBehaviour() == ::transport::dds::PROXY_BEHAVIOUR ?
                (::transport::dds::Transport::Copy_data)$interface.scopedname$_$operation.name$ReplyTypeSupport::copy_data :
                (::transport::dds::Transport::Copy_data)$interface.scopedname$_$operation.name$RequestTypeSupport::copy_data),
            (ddstransport.getBehaviour() == ::transport::dds::PROXY_BEHAVIOUR ?
                (::transport::dds::Transport::Finalize_data)$interface.scopedname$_$operation.name$ReplyTypeSupport::finalize_data :
                (::transport::dds::Transport::Finalize_data)$interface.scopedname$_$operation.name$RequestTypeSupport::finalize_data),
            (ddstransport.getBehaviour() == ::transport::dds::PROXY_BEHAVIOUR ? NULL :
                $ctx.filename$Protocol::$operation.parent.formatedScopedname$_$operation.name$_serve),
            sizeof($interface.scopedname$_$operation.name$Reply)) != 0)
            {
                return false;
            }
                  
        }; separator="\n"$
        }; separator="\n"$
        
        Protocol::_setTransport(transport);
        
        return true;  
    }
    else
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }
    
    return false;
}

$definitions; separator="\n"$
>>

module(ctx, module, definition_list) ::= <<
$definition_list$

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<
void $exception.name$Utils::setTypeData(const $exception.name$ &ex, $exception.name$_t &instance)
{
    $exception.members : { member |instance.$member.name$ = ex.$member.name$;}; separator="\n"$
}

void $exception.name$Utils::extractTypeData($exception.name$ &ex, $exception.name$_t &data)
{
    $exception.members : { member |ex.$member.name$ = data.$member.name$$if(member.typecode.string)$$stringPointer()$$endif$;}; separator="\n"$
}

>>

operation(ctx, operation, param_list) ::= <<
$paramRetType(operation.rettype)$ $ctx.filename$Protocol::$operation.parent.formatedScopedname$_$operation.name$($paramDeclsOnlyOutByRef(params=operation.parameters)$)
{
    ReturnMessage retcode =CLIENT_INTERNAL_ERROR;
    $varDecl(variable=operation.rettypeparam)$
    $operation.parent.scopedname$_$operation.name$Request instance;
    $if(!operation.oneway)$
    $operation.parent.scopedname$_$operation.name$Reply retInstance;

    $varComplexInitializeT(typeName=[operation.parent.scopedname, "_", operation.name, "Reply"], name="retInstance")$
    $endif$
    
    $operation.inputparam : {$createDataHelper(param=it, dataname="instance", isRequest="yes")$};separator="\n"$

    encapsulation encap = {$operation.parent.formatedScopedname$_$operation.name$_str, &instance};
    retcode = dynamic_cast<eprosima::rpcdds::transport::dds::ProxyTransport&>(Protocol::getTransport()).send(&encap, $if(!operation.oneway)$&retInstance$else$NULL$endif$);
    
    $if(!operation.oneway)$
    if(retcode == OPERATION_SUCCESSFUL)
    {
    
    $if(operation.exceptions)$
        switch (retInstance.unio._d)
        {
            case 0:
                $operation.parent.name$_$operation.name$ReplyUtils::extractTypeData(retInstance, retcode$extractParams(params=[operation.outputparam, operation.rettypeparam], separatorInicial=", ")$);
                break;
            $operation.exceptions : { exception |
            case $i$:
                {
                $exception.scopedname$ ex;
                $if(exception.inScope)$
                $exception.scopedname$Utils::extractTypeData(ex, retInstance.unio._u.$exception.name$_ex);
                
                $else$
                $operation.parent.name$_$operation.name$_$exception.name$Utils::extractTypeData(ex, retInstance.unio._u.$exception.name$_ex);
                
                $endif$
                ex.raise();
                }
            }; separator="\n"$
            default:
                throw ClientInternalException("Error extracting information from server");
        }
    $else$
        retcode = (ReturnMessage)retInstance.header.rpcddsRetCode;
        $operation.outputparam : {$extractDataHelper(param=it, dataname="retInstance", isReply="yes")$};separator="\n"$
        $if(operation.rettypeparam)$
        $extractDataHelper(param=operation.rettypeparam, dataname="retInstance", isReply="yes")$        
        $endif$
    
    $endif$
    }
    
    $endif$  
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        $if(!operation.oneway)$
        case SERVER_TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException(retInstance.header.rpcddsRetMsg$stringPointerConst()$);
            break;
        $endif$
        default:
            break;
    };
    

    $if(operation.rettypeparam)$
    return $operation.rettypeparam.name$;
    $endif$
}

void $ctx.filename$Protocol::$operation.parent.formatedScopedname$_$operation.name$_serve(eprosima::rpcdds::protocol::Protocol &protocol,
    void *data , eprosima::rpcdds::transport::Endpoint*)
{
printf("Leido $operation.parent.formatedScopedname$_$operation.name$\n");
}

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

type_declarator(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>


/*!
 * Extra string templates. Utils.
 */
createDataHelper(param, dataname, isRequest) ::= <<
$if(param.typecode.array)$
$memberComplexExtract(member=param, dataname=dataname)$
$else$
$dataname$.$param.name$ = $if(isRequest)$$if(param.typecode.string)$$charConstCasting()$$endif$$endif$$param.name$;
$endif$
>>

extractDataHelper(param, dataname, isReply) ::= <<
$if(isReply)$
$if(param.input)$
$if(param.typecode.primitiveInArguments)$
$if(param.typecode.string)$
if($param.name$ != NULL)
    free($param.name$);
$endif$
$else$
$varComplexDel(variable=param)$
$endif$
$endif$
$if(param.typecode.array)$
$memberComplexCopy(member=param, dataname=dataname)$
$else$
$param.name$ = $dataname$.$param.name$$if(param.typecode.string)$$stringPointer()$$endif$;
$endif$
$else$
$if(param.output)$
$if(param.typecode.primitiveInArguments)$
$if(param.typecode.string)$
$param.name$ = strdup($dataname$.$param.name$);
$else$
$param.name$ = $dataname$.$param.name$;
$endif$
$else$
$memberComplexCopy(member=param, dataname=dataname)$
$endif$
$else$
$if(param.typecode.array)$
$memberComplexCopy(member=param, dataname=dataname)$
$else$
$param.name$ = $dataname$.$param.name$$if(param.typecode.string)$$stringPointer()$$endif$;
$endif$
$endif$
$endif$
>>

createExceptionUtil(operation, exception) ::= <<
void $operation.parent.name$_$operation.name$_$exception.name$Utils::setTypeData(const $exception.scopedname$ &ex, $operation.parent.name$_$operation.name$_$exception.name$_t &instance)
{
    $exception.members : { member |instance.$member.name$ = ex.$member.name$;}; separator="\n"$
}

void $operation.parent.name$_$operation.name$_$exception.name$Utils::extractTypeData($exception.scopedname$ &ex, $operation.parent.name$_$operation.name$_$exception.name$_t &data)
{
    $exception.members : { member |ex.$member.name$ = data.$member.name$$if(member.typecode.string)$$stringPointer()$$endif$;}; separator="\n"$
}


>>