/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorDDSProtocol.cxx
 * This source file contains the definition of the protocol used to create DDS messages.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorDDSProtocol.h"
#include "rpcdds/transports/Transport.h"
#include "rpcdds/transports/dds/ProxyTransport.h"
#include "rpcdds/transports/dds/components/ProxyProcedureEndpoint.h"
#include "CalculatorDDSAsyncSupport.h"
#include "rpcdds/transports/dds/ServerTransport.h"
#include "rpcdds/transports/dds/components/ServerProcedureEndpoint.h"
#include "rpcdds/exceptions/Exceptions.h"
#include "CalculatorRequestReplySupport.h"

using namespace eprosima::rpcdds;
using namespace ::protocol::dds;
using namespace ::transport;
using namespace ::exception;

CalculatorProtocol::CalculatorProtocol() : ::protocol::CalculatorProtocol(), m_ddsTransport(NULL)
, Calculator_addition_str("Calculator_addition")
, Calculator_addition_pe(NULL), Calculator_addition_se(NULL), Calculator_subtraction_str("Calculator_subtraction")
, Calculator_subtraction_pe(NULL), Calculator_subtraction_se(NULL)

{
}

CalculatorProtocol::~CalculatorProtocol()
{
}

bool CalculatorProtocol::setTransport(Transport &transport)
{
    if(strcmp(transport.getType(), "DDS") == 0)
    {
        m_ddsTransport = dynamic_cast<eprosima::rpcdds::transport::dds::Transport*>(&transport);
        
        m_ddsTransport->initialize();
        
        Protocol::_setTransport(transport);
        
        return true;  
    }
    else
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }
    
    return false;
}

// TODO Si falla que elimine los creados.
bool CalculatorProtocol::activateInterface(const char* interfaceName)
{
    const char *requesttypeName = NULL, *replytypeName = NULL;

    if(m_ddsTransport != NULL)
    {
        ::transport::TransportBehaviour behaviour = dynamic_cast<::transport::Transport*>(m_ddsTransport)->getBehaviour();
        
        if(strcmp(interfaceName, "Calculator") == 0)
        {
                        requesttypeName = Calculator_additionRequestTypeSupport::get_type_name();
                
                        if(Calculator_additionRequestTypeSupport::register_type(m_ddsTransport->getParticipant(), requesttypeName) != DDS::RETCODE_OK)
                        {
                            return false;
                        }
                        
                        replytypeName = Calculator_additionReplyTypeSupport::get_type_name();
                
                        if(Calculator_additionReplyTypeSupport::register_type(m_ddsTransport->getParticipant(), replytypeName) != DDS::RETCODE_OK)
                        {
                            return false;
                        }
                        
                        if(behaviour == ::transport::PROXY_BEHAVIOUR)
                        {
                            Calculator_addition_pe = dynamic_cast<::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_addition_str,
                            requesttypeName,
            replytypeName,
                            (::transport::dds::Transport::Initialize_data)Calculator_additionReplyTypeSupport::initialize_data,
                            (::transport::dds::Transport::Copy_data)Calculator_additionReplyTypeSupport::copy_data,
                            (::transport::dds::Transport::Finalize_data)Calculator_additionReplyTypeSupport::finalize_data,
                            NULL,
                            sizeof(Calculator_additionReply)));
                        }
                        if(behaviour == ::transport::SERVER_BEHAVIOUR)
                        {
                            Calculator_addition_se = dynamic_cast<::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_addition_str,
            replytypeName,
                                requesttypeName,
                                (::transport::dds::Transport::Initialize_data)Calculator_additionRequestTypeSupport::initialize_data,
                                (::transport::dds::Transport::Copy_data)Calculator_additionRequestTypeSupport::copy_data,
                                (::transport::dds::Transport::Finalize_data)Calculator_additionRequestTypeSupport::finalize_data,
                                CalculatorProtocol::Calculator_addition_serve,
                                sizeof(Calculator_additionRequest)));
                        }
                        
                        requesttypeName = Calculator_subtractionRequestTypeSupport::get_type_name();
                
                        if(Calculator_subtractionRequestTypeSupport::register_type(m_ddsTransport->getParticipant(), requesttypeName) != DDS::RETCODE_OK)
                        {
                            return false;
                        }
                        
                        replytypeName = Calculator_subtractionReplyTypeSupport::get_type_name();
                
                        if(Calculator_subtractionReplyTypeSupport::register_type(m_ddsTransport->getParticipant(), replytypeName) != DDS::RETCODE_OK)
                        {
                            return false;
                        }
                        
                        if(behaviour == ::transport::PROXY_BEHAVIOUR)
                        {
                            Calculator_subtraction_pe = dynamic_cast<::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_subtraction_str,
                            requesttypeName,
            replytypeName,
                            (::transport::dds::Transport::Initialize_data)Calculator_subtractionReplyTypeSupport::initialize_data,
                            (::transport::dds::Transport::Copy_data)Calculator_subtractionReplyTypeSupport::copy_data,
                            (::transport::dds::Transport::Finalize_data)Calculator_subtractionReplyTypeSupport::finalize_data,
                            NULL,
                            sizeof(Calculator_subtractionReply)));
                        }
                        if(behaviour == ::transport::SERVER_BEHAVIOUR)
                        {
                            Calculator_subtraction_se = dynamic_cast<::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_subtraction_str,
            replytypeName,
                                requesttypeName,
                                (::transport::dds::Transport::Initialize_data)Calculator_subtractionRequestTypeSupport::initialize_data,
                                (::transport::dds::Transport::Copy_data)Calculator_subtractionRequestTypeSupport::copy_data,
                                (::transport::dds::Transport::Finalize_data)Calculator_subtractionRequestTypeSupport::finalize_data,
                                CalculatorProtocol::Calculator_subtraction_serve,
                                sizeof(Calculator_subtractionRequest)));
                        }
                        
        }

    }
    else
    {
      // TODO Trace.
    }
    
    return false;
}

DDS_Long CalculatorProtocol::Calculator_addition(/*in*/ DDS_Long value1, /*in*/ DDS_Long value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    DDS_Long  addition_ret = 0;
    Calculator_additionRequest instance;
    Calculator_additionReply retInstance;

    Calculator_additionReply_initialize(&retInstance);
    
    instance.value1 = value1;
    instance.value2 = value2;

    retcode = Calculator_addition_pe->send(&instance, &retInstance);
    
    if(retcode == OPERATION_SUCCESSFUL)
    {
    
        retcode = (ReturnMessage)retInstance.header.rpcddsRetCode;
        addition_ret = retInstance.addition_ret;
    
    }
      
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        case SERVER_TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException(retInstance.header.rpcddsRetMsg);
            break;
        default:
            break;
    };
    

    return addition_ret;
}
void CalculatorProtocol::Calculator_addition_async(Calculator_additionCallbackHandler &obj, /*in*/ DDS_Long value1, /*in*/ DDS_Long value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    Calculator_additionRequest instance;
    Calculator_additionTask *task = new Calculator_additionTask(obj);
    
    instance.value1 = value1;
    instance.value2 = value2;

    retcode = Calculator_addition_pe->send_async(&instance, task);
    
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}

void CalculatorProtocol::Calculator_addition_serve(eprosima::rpcdds::protocol::Protocol &protocol,
    void *data , eprosima::rpcdds::transport::Endpoint *endpoint)
{
    CalculatorProtocol &_protocol = dynamic_cast<CalculatorProtocol&>(protocol);
    Calculator_additionRequest &requestData = *(Calculator_additionRequest*)data;
    DDS_Long  value1 = 0;
    DDS_Long  value2 = 0;
    DDS_Long  addition_ret = 0;   
    Calculator_additionReply replyData;
    replyData.header.clientId.value_1 = requestData.header.clientId.value_1;
	replyData.header.clientId.value_2 = requestData.header.clientId.value_2;
	replyData.header.clientId.value_3 = requestData.header.clientId.value_3;
	replyData.header.clientId.value_4 = requestData.header.clientId.value_4;
	replyData.header.requestSequenceNumber = requestData.header.requestSequenceNumber;
    
    
    value1 = requestData.value1;
    value2 = requestData.value2;
    
    
    
    try
    {
        if(_protocol._Calculator_impl != NULL)
        {
	        addition_ret = _protocol._Calculator_impl->addition(value1, value2);
	
	        
		    replyData.addition_ret = addition_ret;
	        
	        replyData.header.rpcddsRetCode = OPERATION_SUCCESSFUL;
	        replyData.header.rpcddsRetMsg = (char*)"";
	
	        _protocol.Calculator_addition_se->sendReply(&replyData);
        }
        // TODO Send exception.
    }
    catch(const ServerInternalException &ex)
    {
        memset((char*)&replyData + sizeof(replyData.header), 0, sizeof(replyData) - sizeof(replyData.header));
        replyData.header.rpcddsRetCode = SERVER_INTERNAL_ERROR;
        replyData.header.rpcddsRetMsg = (char*)ex.what();
        
        _protocol.Calculator_addition_se->sendReply(&replyData);
    }
    
    Calculator_additionRequest_finalize(&requestData);
    
}
DDS_Long CalculatorProtocol::Calculator_subtraction(/*in*/ DDS_Long value1, /*in*/ DDS_Long value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    DDS_Long  subtraction_ret = 0;
    Calculator_subtractionRequest instance;
    Calculator_subtractionReply retInstance;

    Calculator_subtractionReply_initialize(&retInstance);
    
    instance.value1 = value1;
    instance.value2 = value2;

    retcode = Calculator_subtraction_pe->send(&instance, &retInstance);
    
    if(retcode == OPERATION_SUCCESSFUL)
    {
    
        retcode = (ReturnMessage)retInstance.header.rpcddsRetCode;
        subtraction_ret = retInstance.subtraction_ret;
    
    }
      
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        case SERVER_TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException(retInstance.header.rpcddsRetMsg);
            break;
        default:
            break;
    };
    

    return subtraction_ret;
}
void CalculatorProtocol::Calculator_subtraction_async(Calculator_subtractionCallbackHandler &obj, /*in*/ DDS_Long value1, /*in*/ DDS_Long value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    Calculator_subtractionRequest instance;
    Calculator_subtractionTask *task = new Calculator_subtractionTask(obj);
    
    instance.value1 = value1;
    instance.value2 = value2;

    retcode = Calculator_subtraction_pe->send_async(&instance, task);
    
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}

void CalculatorProtocol::Calculator_subtraction_serve(eprosima::rpcdds::protocol::Protocol &protocol,
    void *data , eprosima::rpcdds::transport::Endpoint *endpoint)
{
    CalculatorProtocol &_protocol = dynamic_cast<CalculatorProtocol&>(protocol);
    Calculator_subtractionRequest &requestData = *(Calculator_subtractionRequest*)data;
    DDS_Long  value1 = 0;
    DDS_Long  value2 = 0;
    DDS_Long  subtraction_ret = 0;   
    Calculator_subtractionReply replyData;
    replyData.header.clientId.value_1 = requestData.header.clientId.value_1;
	replyData.header.clientId.value_2 = requestData.header.clientId.value_2;
	replyData.header.clientId.value_3 = requestData.header.clientId.value_3;
	replyData.header.clientId.value_4 = requestData.header.clientId.value_4;
	replyData.header.requestSequenceNumber = requestData.header.requestSequenceNumber;
    
    
    value1 = requestData.value1;
    value2 = requestData.value2;
    
    
    
    try
    {
        if(_protocol._Calculator_impl != NULL)
        {
	        subtraction_ret = _protocol._Calculator_impl->subtraction(value1, value2);
	
	        
		    replyData.subtraction_ret = subtraction_ret;
	        
	        replyData.header.rpcddsRetCode = OPERATION_SUCCESSFUL;
	        replyData.header.rpcddsRetMsg = (char*)"";
	
	        _protocol.Calculator_subtraction_se->sendReply(&replyData);
        }
        // TODO Send exception.
    }
    catch(const ServerInternalException &ex)
    {
        memset((char*)&replyData + sizeof(replyData.header), 0, sizeof(replyData) - sizeof(replyData.header));
        replyData.header.rpcddsRetCode = SERVER_INTERNAL_ERROR;
        replyData.header.rpcddsRetMsg = (char*)ex.what();
        
        _protocol.Calculator_subtraction_se->sendReply(&replyData);
    }
    
    Calculator_subtractionRequest_finalize(&requestData);
    
}