/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file HelloWorldServer.cxx
 * This source file contains the definition of the server for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "HelloWorldServer.h"
#include "strategies/ServerStrategy.h"
#include "transports/ServerTransport.h"
#include "HelloWorldProtocol.h"
#include "exceptions/ServerInternalException.h"

namespace HelloWorld
{
    HelloWorldResourceServer::HelloWorldResourceServer(eprosima::rpcdds::strategy::ServerStrategy &strategy, eprosima::rpcdds::transport::ServerTransport &transport,
                eprosima::rpcdds::protocol::HelloWorldProtocol &protocol, HelloWorldResourceServerImpl &servant) :
        Server(strategy, transport, protocol), _impl(servant)
    {
       protocol.activateInterface("HelloWorld::HelloWorldResource");
       protocol.linkHelloWorld_HelloWorldResourceImpl(servant);
    }

    HelloWorldResourceServer::~HelloWorldResourceServer()
    {
        //TODO Unlink an deactivate.
    }




    /*void HelloWorldResourceServer::hello(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service)
    { 
        HelloWorldResourceServer *srv = dynamic_cast<HelloWorldResourceServer*>(server);
        char*  name = NULL;
        HelloWorld::HelloResponse hello_ret;
        memset(&hello_ret, 0, sizeof(HelloWorld::HelloResponse));   
        HelloWorldResource_helloReply replyData;
        

        HelloWorldResource_helloRequestUtils::extractTypeData(*(HelloWorldResource_helloRequest*)requestData, name);

        try
        {
            hello_ret = srv->_impl.hello(name);

            HelloWorldResource_helloReplyUtils::setTypeData(replyData, hello_ret);
            replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
            replyData.header.rpcddsRetMsg = (char*)"";

            service->sendReply(requestData, &replyData);
        }
        catch(const eProsima::RPCDDS::ServerInternalException &ex)
        {
            memset((char*)&replyData + sizeof(replyData.header), 0, sizeof(replyData) - sizeof(replyData.header));
            replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
            replyData.header.rpcddsRetMsg = (char*)ex.what();
            
            service->sendReply(requestData, &replyData);
        }
        
        HelloWorldResource_helloRequestTypeSupport::delete_data((HelloWorldResource_helloRequest*)requestData);
        
        HelloWorld::HelloResponse_finalize(&hello_ret);
    }*/


};
