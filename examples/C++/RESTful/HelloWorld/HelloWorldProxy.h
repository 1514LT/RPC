/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file HelloWorldProxy.h
 * This header file contains the declaration of the proxy for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _HelloWorld_PROXY_H_
#define _HelloWorld_PROXY_H_

#include "rpcdds/client/Proxy.h"
#include "rpcdds/exceptions/SystemException.h"
#include "rpcdds/exceptions/UserException.h"
#include "rpcdds/utils/dds/Middleware.h"
#include "HelloWorld.h"

namespace eprosima
{
    namespace rpcdds
    {
        namespace protocol
        {
            class HelloWorldProtocol;
        }
    }
}

namespace HelloWorld
{
    /*!
     * @brief This abstract class defines the callbacks that RPCDDS will call in an asynchronous call.
     *        These callback has to be implemented in a derived class.
     */
    class HelloWorldResource_helloCallbackHandler
    {
        public:
            /*!
             * This function is called when is received the reply from the server.
             */
            virtual void hello(/*out*/ const HelloWorld::HelloResponse& hello_ret) = 0;
            
            /*!
             * @brief This function is called when an exception occurs.
             *        This exception can be launched in the server's side or in the client's side.
             *
             * @param ex The exception that will be launched.
             */
            virtual void on_exception(const eprosima::rpcdds::exception::SystemException &ex) = 0;
    };


    /*!
     * @brief This class implements a specific server's proxy for the defined interface HelloWorldResource.
     */
    class RPCDDSUSERDllExport HelloWorldResourceProxy : public eprosima::rpcdds::proxy::Proxy
    {
        public:
       
            /*!
             * @brief This constructor sets the transport that will be used by the server's proxy.
             *
             * @param transport The network transport that server's proxy has to use.
             *        This transport's object is not deleted by this class in its destructor. Cannot be NULL.
             * @param protocol The protocol used to send the information over the transport.
             *        This protocol's object is not deleted by this class in its destructor. Cannot be NULL.
             * @exception eprosima::rpcdds::exception::InitializeException This exception is thrown when the initialization was wrong.
             */
            HelloWorldResourceProxy(eprosima::rpcdds::transport::ProxyTransport &transport,
                eprosima::rpcdds::protocol::HelloWorldProtocol &protocol);

            //! @brief The default destructor.
            virtual ~HelloWorldResourceProxy();
            



            //! @brief Proxy method for the operation hello
            HelloWorld::HelloResponse hello(/*in*/ const char* name);

            
            ////! @brief Proxy asynchronous method for the operation hello
            void hello_async(HelloWorldResource_helloCallbackHandler &obj, /*in*/ const char* name);

    };

};


#endif // _HelloWorld_PROXY_H_
