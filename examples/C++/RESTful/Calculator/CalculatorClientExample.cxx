/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorClientExample.cxx
 * This source file shows a simple example of how to create a proxy for an interface.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorProxy.h"
#include "CalculatorRESTProtocol.h"
#include "rpcdds/transports/HttpProxyTransport.h"
#include "rpcdds/exceptions/Exceptions.h"

#include <iostream>

using namespace std;

using namespace eprosima::rpcdds;
using namespace eprosima::rpcdds::exception;
using namespace eprosima::rpcdds::transport;
using namespace eprosima::rpcdds::protocol::rest;

int main(int argc, char **argv)
{
    CalculatorProtocol *protocol = NULL;
    ProxyTransport *transport = NULL;
    Calculator::addResourceProxy *addProxy = NULL;
	Calculator::substractResourceProxy *substractProxy = NULL;
	Calculator::multiplyResourceProxy *multiplyProxy = NULL;
	Calculator::divideResourceProxy *divideProxy = NULL;
    
    // Creation of the proxy for interface "Calculator::addResource".
    try
    {
        protocol = new CalculatorProtocol();
        transport = new HttpProxyTransport("127.0.0.1:8080");
        addProxy = new Calculator::addResourceProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

	// Creation of the proxy for interface "Calculator::substractResourceProxy".
    try
    {
		substractProxy = new Calculator::substractResourceProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

	// Creation of the proxy for interface "Calculator::multiplyResourceProxy".
    try
    {
		multiplyProxy = new Calculator::multiplyResourceProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

	// Creation of the proxy for interface "Calculator::divideResourceProxy".
    try
    {
		divideProxy = new Calculator::divideResourceProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }
    
    // Create and initialize parameters.
    DDS_Long  a = 6;
    DDS_Long  b = 2;

	////////////////////////////////////////////////////////////////////////////////////////

    // Create and initialize return value.
    Calculator::AddResponse add_ret;
    Calculator::AddResponse_initialize(&add_ret);

    // Call to remote procedure "add".
    try
    {
        add_ret = addProxy->add(a, b);
		if(add_ret._d == 1) {
			cout << a << " + " << b << endl;
			cout << "Result: " << add_ret._u.xmlAddResponse.xmlRepresentation << endl;
		}
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }

    Calculator::AddResponse_finalize(&add_ret);

	////////////////////////////////////////////////////////////////////////////////////////

	// Create and initialize return value.
	Calculator::SubstractResponse substract_ret;
	Calculator::SubstractResponse_initialize(&substract_ret);

    // Call to remote procedure "add".
    try
    {
		substract_ret = substractProxy->substract(a, b);
		if(substract_ret._d == 1) {
			cout << a << " - " << b << endl;
			cout << "Result: " << substract_ret._u.xmlSubstractResponse.xmlRepresentation << endl;
		}
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }

	Calculator::SubstractResponse_finalize(&substract_ret);

	////////////////////////////////////////////////////////////////////////////////////////

	// Create and initialize return value.
	Calculator::MultiplyResponse multiply_ret;
	Calculator::MultiplyResponse_initialize(&multiply_ret);

    // Call to remote procedure "add".
    try
    {
		multiply_ret = multiplyProxy->multiply(a, b);
		if(multiply_ret._d == 1) {
			cout << a << " * " << b << endl;
			cout << "Result: " << multiply_ret._u.xmlMultiplyResponse.xmlRepresentation << endl;
		}
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }

	Calculator::MultiplyResponse_finalize(&multiply_ret);

	////////////////////////////////////////////////////////////////////////////////////////

		// Create and initialize return value.
	Calculator::DivideResponse divide_ret;
	Calculator::DivideResponse_initialize(&divide_ret);

    // Call to remote procedure "add".
    try
    {
		divide_ret = divideProxy->divide(a, b);
		if(divide_ret._d == 1) {
			cout << a << " / " << b << endl;
			cout << "Result: " << divide_ret._u.xmlDivideResponse.xmlRepresentation << endl;
		}
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }

	Calculator::DivideResponse_finalize(&divide_ret);

	////////////////////////////////////////////////////////////////////////////////////////
    
		// Create and initialize return value.
	Calculator::DivideResponse_initialize(&divide_ret);

	b = 0;

    // Call to remote procedure "add".
    try
    {
		divide_ret = divideProxy->divide(a, b);
		if(divide_ret._d == 1) {
			cout << a << " / " << b << endl;
			cout << "Result: " << divide_ret._u.xmlDivideResponse.xmlRepresentation << endl;
		}
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }

	Calculator::DivideResponse_finalize(&divide_ret);

	////////////////////////////////////////////////////////////////////////////////////////
    delete(addProxy);
    delete(substractProxy);
	delete(multiplyProxy);
    delete(divideProxy);
    delete(transport);
    delete(protocol);
   
    return 0;
}
















