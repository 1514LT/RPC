/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorServerExample.cxx
 * This source file shows a simple example of how to create a server for an interface.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorServer.h"
#include "strategies/ThreadPoolStrategy.h"
#include "CalculatorRESTProtocol.h"
#include "transports/HttpServerTransport.h"
#include "exceptions/Exceptions.h"
#include "utils/Utilities.h"
#include "CalculatorServerImplExample.h"

#include <iostream>

using namespace eprosima::rpcdds;
using namespace eprosima::rpcdds::exception;
using namespace eprosima::rpcdds::strategy;
using namespace eprosima::rpcdds::transport;
using namespace eprosima::rpcdds::protocol::rest;

int main(int argc, char **argv)
{
    unsigned int threadPoolSize = 5;
    ThreadPoolStrategy *pool = NULL;
    CalculatorProtocol *protocol = NULL;
    HttpServerTransport *transport = NULL;

    Calculator::addResourceServer *addServer = NULL;
	Calculator::substractResourceServer *substractServer = NULL;
	Calculator::multiplyResourceServer *multiplyServer = NULL;
	Calculator::divideResourceServer *divideServer = NULL;

    addResourceServerImplExample addServant;
	substractResourceServerImplExample substractServant;
	multiplyResourceServerImplExample multiplyServant;
	divideResourceServerImplExample divideServant;
    
    // Create and initialize the server for interface "Calculator::addResource".
    try
    {
        pool = new ThreadPoolStrategy(threadPoolSize);
        protocol = new CalculatorProtocol();
        transport = new HttpServerTransport("127.0.0.1:8080");
        addServer = new Calculator::addResourceServer(*pool, *transport, *protocol, addServant);
        addServer->serve();
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

	// Create and initialize the server for interface "Calculator::substractResource".
    try
    {
        substractServer = new Calculator::substractResourceServer(*pool, *transport, *protocol, substractServant);
        substractServer->serve();
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

	// Create and initialize the server for interface "Calculator::multiplyResourceServer".
    try
    {
		multiplyServer = new Calculator::multiplyResourceServer(*pool, *transport, *protocol, multiplyServant);
        multiplyServer->serve();
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

	// Create and initialize the server for interface "Calculator::divideResourceServer".

    try
    {
		divideServer = new Calculator::divideResourceServer(*pool, *transport, *protocol, divideServant);
        divideServer->serve();
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }
    
    while(1)
    {
        eprosima::rpcdds::sleep(10000);
    }
    
    // Stop and delete the server.
	addServer->stop();
    delete addServer;
	substractServer->stop();
    delete substractServer;
	multiplyServer->stop();
    delete multiplyServer;
	divideServer->stop();
    delete divideServer;
    delete protocol;
    delete transport;
    delete pool;
    
    return 0;
}
















