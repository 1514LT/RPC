/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorServer.cxx
 * This source file contains the definition of the server for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorServer.h"
#include "rpcdds/strategies/ServerStrategy.h"
#include "rpcdds/transports/ServerTransport.h"
#include "CalculatorProtocol.h"
#include "rpcdds/exceptions/ServerInternalException.h"

namespace Calculator
{
    addResourceServer::addResourceServer(eprosima::rpcdds::strategy::ServerStrategy &strategy, eprosima::rpcdds::transport::ServerTransport &transport,
                eprosima::rpcdds::protocol::CalculatorProtocol &protocol, addResourceServerImpl &servant) :
        Server(strategy, transport, protocol), _impl(servant)
    {
       protocol.activateInterface("Calculator::addResource");
       protocol.linkCalculator_addResourceImpl(servant);
    }

    addResourceServer::~addResourceServer()
    {
        //TODO Unlink an deactivate.
    }




    /*void addResourceServer::add(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service)
    { 
        addResourceServer *srv = dynamic_cast<addResourceServer*>(server);
        DDS_Long  a = 0;
        DDS_Long  b = 0;
        Calculator::AddResponse add_ret;
        memset(&add_ret, 0, sizeof(Calculator::AddResponse));   
        addResource_addReply replyData;
        

        addResource_addRequestUtils::extractTypeData(*(addResource_addRequest*)requestData, a, b);

        try
        {
            add_ret = srv->_impl.add(a, b);

            addResource_addReplyUtils::setTypeData(replyData, add_ret);
            replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
            replyData.header.rpcddsRetMsg = (char*)"";

            service->sendReply(requestData, &replyData);
        }
        catch(const eProsima::RPCDDS::ServerInternalException &ex)
        {
            memset((char*)&replyData + sizeof(replyData.header), 0, sizeof(replyData) - sizeof(replyData.header));
            replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
            replyData.header.rpcddsRetMsg = (char*)ex.what();
            
            service->sendReply(requestData, &replyData);
        }
        
        addResource_addRequestTypeSupport::delete_data((addResource_addRequest*)requestData);
        
        Calculator::AddResponse_finalize(&add_ret);
    }*/


    substractResourceServer::substractResourceServer(eprosima::rpcdds::strategy::ServerStrategy &strategy, eprosima::rpcdds::transport::ServerTransport &transport,
                eprosima::rpcdds::protocol::CalculatorProtocol &protocol, substractResourceServerImpl &servant) :
        Server(strategy, transport, protocol), _impl(servant)
    {
       protocol.activateInterface("Calculator::substractResource");
       protocol.linkCalculator_substractResourceImpl(servant);
    }

    substractResourceServer::~substractResourceServer()
    {
        //TODO Unlink an deactivate.
    }




    /*void substractResourceServer::substract(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service)
    { 
        substractResourceServer *srv = dynamic_cast<substractResourceServer*>(server);
        DDS_Long  a = 0;
        DDS_Long  b = 0;
        Calculator::SubstractResponse substract_ret;
        memset(&substract_ret, 0, sizeof(Calculator::SubstractResponse));   
        substractResource_substractReply replyData;
        

        substractResource_substractRequestUtils::extractTypeData(*(substractResource_substractRequest*)requestData, a, b);

        try
        {
            substract_ret = srv->_impl.substract(a, b);

            substractResource_substractReplyUtils::setTypeData(replyData, substract_ret);
            replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
            replyData.header.rpcddsRetMsg = (char*)"";

            service->sendReply(requestData, &replyData);
        }
        catch(const eProsima::RPCDDS::ServerInternalException &ex)
        {
            memset((char*)&replyData + sizeof(replyData.header), 0, sizeof(replyData) - sizeof(replyData.header));
            replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
            replyData.header.rpcddsRetMsg = (char*)ex.what();
            
            service->sendReply(requestData, &replyData);
        }
        
        substractResource_substractRequestTypeSupport::delete_data((substractResource_substractRequest*)requestData);
        
        Calculator::SubstractResponse_finalize(&substract_ret);
    }*/


    multiplyResourceServer::multiplyResourceServer(eprosima::rpcdds::strategy::ServerStrategy &strategy, eprosima::rpcdds::transport::ServerTransport &transport,
                eprosima::rpcdds::protocol::CalculatorProtocol &protocol, multiplyResourceServerImpl &servant) :
        Server(strategy, transport, protocol), _impl(servant)
    {
       protocol.activateInterface("Calculator::multiplyResource");
       protocol.linkCalculator_multiplyResourceImpl(servant);
    }

    multiplyResourceServer::~multiplyResourceServer()
    {
        //TODO Unlink an deactivate.
    }




    /*void multiplyResourceServer::multiply(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service)
    { 
        multiplyResourceServer *srv = dynamic_cast<multiplyResourceServer*>(server);
        DDS_Long  a = 0;
        DDS_Long  b = 0;
        Calculator::MultiplyResponse multiply_ret;
        memset(&multiply_ret, 0, sizeof(Calculator::MultiplyResponse));   
        multiplyResource_multiplyReply replyData;
        

        multiplyResource_multiplyRequestUtils::extractTypeData(*(multiplyResource_multiplyRequest*)requestData, a, b);

        try
        {
            multiply_ret = srv->_impl.multiply(a, b);

            multiplyResource_multiplyReplyUtils::setTypeData(replyData, multiply_ret);
            replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
            replyData.header.rpcddsRetMsg = (char*)"";

            service->sendReply(requestData, &replyData);
        }
        catch(const eProsima::RPCDDS::ServerInternalException &ex)
        {
            memset((char*)&replyData + sizeof(replyData.header), 0, sizeof(replyData) - sizeof(replyData.header));
            replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
            replyData.header.rpcddsRetMsg = (char*)ex.what();
            
            service->sendReply(requestData, &replyData);
        }
        
        multiplyResource_multiplyRequestTypeSupport::delete_data((multiplyResource_multiplyRequest*)requestData);
        
        Calculator::MultiplyResponse_finalize(&multiply_ret);
    }*/


    divideResourceServer::divideResourceServer(eprosima::rpcdds::strategy::ServerStrategy &strategy, eprosima::rpcdds::transport::ServerTransport &transport,
                eprosima::rpcdds::protocol::CalculatorProtocol &protocol, divideResourceServerImpl &servant) :
        Server(strategy, transport, protocol), _impl(servant)
    {
       protocol.activateInterface("Calculator::divideResource");
       protocol.linkCalculator_divideResourceImpl(servant);
    }

    divideResourceServer::~divideResourceServer()
    {
        //TODO Unlink an deactivate.
    }




    /*void divideResourceServer::divide(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service)
    { 
        divideResourceServer *srv = dynamic_cast<divideResourceServer*>(server);
        DDS_Long  a = 0;
        DDS_Long  b = 0;
        Calculator::DivideResponse divide_ret;
        memset(&divide_ret, 0, sizeof(Calculator::DivideResponse));   
        divideResource_divideReply replyData;
        

        divideResource_divideRequestUtils::extractTypeData(*(divideResource_divideRequest*)requestData, a, b);

        try
        {
            divide_ret = srv->_impl.divide(a, b);

            divideResource_divideReplyUtils::setTypeData(replyData, divide_ret);
            replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
            replyData.header.rpcddsRetMsg = (char*)"";

            service->sendReply(requestData, &replyData);
        }
        catch(const eProsima::RPCDDS::ServerInternalException &ex)
        {
            memset((char*)&replyData + sizeof(replyData.header), 0, sizeof(replyData) - sizeof(replyData.header));
            replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
            replyData.header.rpcddsRetMsg = (char*)ex.what();
            
            service->sendReply(requestData, &replyData);
        }
        
        divideResource_divideRequestTypeSupport::delete_data((divideResource_divideRequest*)requestData);
        
        Calculator::DivideResponse_finalize(&divide_ret);
    }*/


};
