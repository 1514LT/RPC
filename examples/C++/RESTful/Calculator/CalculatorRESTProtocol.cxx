/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorRESTProtocol.cxx
 * This source file contains the definition of the protocol used to create REST messages.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorRESTProtocol.h"
#include "exceptions/Exceptions.h"
#include "transports/ProxyTransport.h"
#include "transports/ServerTransport.h"
#include "protocols/rest/RESTSerializer.h"

using namespace eprosima::rpcdds;
using namespace ::protocol::rest;
using namespace ::transport;
using namespace eprosima::rpcdds::exception;

#include <sstream>

using namespace std;

CalculatorProtocol::CalculatorProtocol() {}

CalculatorProtocol::~CalculatorProtocol() {}

bool CalculatorProtocol::isNumeric(string&& myString) {
    stringstream ss(myString);
    float f;
    ss >> noskipws >> f;

    return ss.eof() && !ss.fail();
}

bool CalculatorProtocol::setTransport(Transport &transport)
{    
    if(strcmp(transport.getType(), "HTTP") != 0)
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }
    
    if(transport.getBehaviour() == SERVER_BEHAVIOUR)
    {
        // If this is a server transport, we set its callback
        eprosima::rpcdds::transport::ServerTransport &serverTransport = dynamic_cast<eprosima::rpcdds::transport::ServerTransport&>(transport);
        serverTransport.setCallback(&CalculatorProtocol::worker);
    }
        
    _setTransport(transport);
        
    return true;
}

bool CalculatorProtocol::activateInterface(const char* interfaceName)
{
    return true;
}

int CalculatorProtocol::deserializeContentLength(char* buffer) {
    char contentLength[16];
    strcpy(contentLength, "Content-Length:");
    char *p = strtok(buffer, "\r\n");
    while(p) {
        p[strlen(p)] = '\r'; // strtok puts a '\0', we don't want it
        if(memcmp(p, contentLength, 15) == 0) {
            return atoi(p+15); // 15 = "Content-Length:"
        }
        p = strtok(NULL, "\r\n");
    }

    return 0;
}

void CalculatorProtocol::worker(Protocol& protocol, void *&data, size_t dataLength, eprosima::rpcdds::transport::Endpoint *endpoint)
{
    // TODO : Call the protocol
    eprosima::rpcdds::protocol::rest::CalculatorProtocol &restProtocol = dynamic_cast<eprosima::rpcdds::protocol::rest::CalculatorProtocol&>( protocol );
    HttpMessage *httpMessage = reinterpret_cast<HttpMessage*>(data);

    HttpMessage response = restProtocol.processRequest(*httpMessage);
    
    dynamic_cast<ServerTransport&>(restProtocol.getTransport()).sendReply(&response, 0, endpoint);
}

// Server
HttpMessage CalculatorProtocol::processRequest(HttpMessage &httpMessage)
{
    RESTSerializer restSerializer;
    
    restSerializer.deserializeUri(httpMessage.getUri(), "/calculator/");
    
    // TODO Siempre se crea aunque no haya un error. Cambiar
    HttpMessage http404Response;
    http404Response.setResponseCode(404);
    http404Response.setResponseStatus("Resource not found");
    
    // BEGIN ITERATION 
    string tag;
    if(!restSerializer.existsTagLevel(0)) {
    return http404Response; // ERROR NO OPERATIONS
    }
    if(restSerializer.getTag(0).compare("add") == 0) {
    // BEGIN ITERATION add
    if(!restSerializer.existsTagLevel(1)) {
    if(httpMessage.getMethod() == HttpMessage::HTTP_METHOD_GET) {
    if(restSerializer.existsQueryParameter("a")&&restSerializer.existsQueryParameter("b")) {
    return deserialize_addResource_add(restSerializer, httpMessage); // MATCHING
    }
    }
    }
    // END ITERATION add
    }
    if(restSerializer.getTag(0).compare("substract") == 0) {
    // BEGIN ITERATION substract
    if(!restSerializer.existsTagLevel(1)) {
    if(httpMessage.getMethod() == HttpMessage::HTTP_METHOD_GET) {
    if(restSerializer.existsQueryParameter("a")&&restSerializer.existsQueryParameter("b")) {
    return deserialize_substractResource_substract(restSerializer, httpMessage); // MATCHING
    }
    }
    }
    // END ITERATION substract
    }
    if(restSerializer.getTag(0).compare("multiply") == 0) {
    // BEGIN ITERATION multiply
    if(!restSerializer.existsTagLevel(1)) {
    if(httpMessage.getMethod() == HttpMessage::HTTP_METHOD_GET) {
    if(restSerializer.existsQueryParameter("a")&&restSerializer.existsQueryParameter("b")) {
    return deserialize_multiplyResource_multiply(restSerializer, httpMessage); // MATCHING
    }
    }
    }
    // END ITERATION multiply
    }
    if(restSerializer.getTag(0).compare("divide") == 0) {
    // BEGIN ITERATION divide
    if(!restSerializer.existsTagLevel(1)) {
    if(httpMessage.getMethod() == HttpMessage::HTTP_METHOD_GET) {
    if(restSerializer.existsQueryParameter("a")&&restSerializer.existsQueryParameter("b")) {
    return deserialize_divideResource_divide(restSerializer, httpMessage); // MATCHING
    }
    }
    }
    // END ITERATION divide
    }
    // ERROR NO MATCH FOUND
    // END ITERATION 

    
    return http404Response;
}




Calculator::AddResponse CalculatorProtocol::Calculator_addResource_add(/*in*/ DDS_Long a, /*in*/ DDS_Long b)
{
     stringstream stream;
     RESTSerializer restSerializer;
     eprosima::rpcdds::transport::ProxyTransport &proxyTransport = dynamic_cast<eprosima::rpcdds::transport::ProxyTransport&>( getTransport() );
     Calculator::AddResponse add_ret;
     Calculator::AddResponse_initialize(&add_ret);
     // XXX TODO if NULL -> error
     
     // Resource Base URI = /calculator/
     // Path = add
     // Method = GET
     // Body Parameter = 

     HttpMessage httpMessage;
     
     httpMessage.setMethod(HttpMessage::HTTP_METHOD_GET);
     //TODO Chequear host en el transport.
     httpMessage.setHost("example.com");
     std::string uri("/calculator/add"); 
     
        std::string paramValue;
        stream << a;
        paramValue = stream.str();
        stream.str(std::string());
        stream.clear();
        restSerializer.serializeQueryParameter(uri, "a", paramValue);

        stream << b;
        paramValue = stream.str();
        stream.str(std::string());
        stream.clear();
        restSerializer.serializeQueryParameter(uri, "b", paramValue);       

     
     httpMessage.setUri(uri);
     




     
     // HTTP connection
     // TODO Check connection error.
     proxyTransport.connect();
     proxyTransport.send(&httpMessage, 0);
     HttpMessage httpResponse;
     size_t dump;
     proxyTransport.receive(&httpResponse, 0, dump);
     
     
     int discriminator = 0;

     if(httpResponse.getBodyContentType().find("xml") != string::npos)
     {
        discriminator = 1;
     } 
     else if(httpResponse.getBodyContentType().find("json") != string::npos)
     {
        discriminator = 2;
     }
    
     add_ret._d = discriminator;
     
     switch(discriminator)
     {
     case 0:
          add_ret._u.emptyAddResponse.status = httpResponse.getResponseCode();
          break;
          case 1:
          add_ret._u.xmlAddResponse.status = httpResponse.getResponseCode();
          add_ret._u.xmlAddResponse.xmlRepresentation = strdup(httpResponse.getBodyData().c_str());
          break;
          
     }
     
              
     return add_ret;
}

HttpMessage CalculatorProtocol::deserialize_addResource_add(RESTSerializer &restSerializer, HttpMessage &httpMessage)
{
    std::stringstream stream;
    

    // Deserialize a
    DDS_Long  a = 0;
    stream << restSerializer.getQueryParameter("a");
    stream >> a;
    stream.str(std::string());
    stream.clear();

    // Deserialize b
    DDS_Long  b = 0;
    stream << restSerializer.getQueryParameter("b");
    stream >> b;
    stream.str(std::string());
    stream.clear();

    




    
    // TODO Check implementation.
    Calculator::AddResponse AddResponse = _Calculator_addResource_impl->add(  a, b  );
    
    HttpMessage httpResponse;
    switch(AddResponse._d)
    {
    case 0:
        httpResponse.setResponseCode(AddResponse._u.emptyAddResponse.status);
        break;
    case 1:
        httpResponse.setResponseCode(AddResponse._u.xmlAddResponse.status);
    httpResponse.setBodyData(AddResponse._u.xmlAddResponse.xmlRepresentation); 
        break;

    }

    if(httpResponse.getBodyData().size() > 0)
    {
        if(AddResponse._d == 1)
            httpResponse.setBodyContentType("application/xml");
        else if(AddResponse._d == 2)
            httpResponse.setBodyContentType("application/json");
    }
    
    return httpResponse;
}



Calculator::SubstractResponse CalculatorProtocol::Calculator_substractResource_substract(/*in*/ DDS_Long a, /*in*/ DDS_Long b)
{
     stringstream stream;
     RESTSerializer restSerializer;
     eprosima::rpcdds::transport::ProxyTransport &proxyTransport = dynamic_cast<eprosima::rpcdds::transport::ProxyTransport&>( getTransport() );
     Calculator::SubstractResponse substract_ret;
     Calculator::SubstractResponse_initialize(&substract_ret);
     // XXX TODO if NULL -> error
     
     // Resource Base URI = /calculator/
     // Path = substract
     // Method = GET
     // Body Parameter = 

     HttpMessage httpMessage;
     
     httpMessage.setMethod(HttpMessage::HTTP_METHOD_GET);
     //TODO Chequear host en el transport.
     httpMessage.setHost("example.com");
     std::string uri("/calculator/substract"); 
     
        std::string paramValue;
        stream << a;
        paramValue = stream.str();
        stream.str(std::string());
        stream.clear();
        restSerializer.serializeQueryParameter(uri, "a", paramValue);

        stream << b;
        paramValue = stream.str();
        stream.str(std::string());
        stream.clear();
        restSerializer.serializeQueryParameter(uri, "b", paramValue);       

     
     httpMessage.setUri(uri);
     




     
     // HTTP connection
     // TODO Check connection error.
     proxyTransport.connect();
     proxyTransport.send(&httpMessage, 0);
     HttpMessage httpResponse;
     size_t dump;
     proxyTransport.receive(&httpResponse, 0, dump);
     
     
     int discriminator = 0;

     if(httpResponse.getBodyContentType().find("xml") != string::npos)
     {
        discriminator = 1;
     } 
     else if(httpResponse.getBodyContentType().find("json") != string::npos)
     {
        discriminator = 2;
     }
    
     substract_ret._d = discriminator;
     
     switch(discriminator)
     {
     case 0:
          substract_ret._u.emptySubstractResponse.status = httpResponse.getResponseCode();
          break;
          case 1:
          substract_ret._u.xmlSubstractResponse.status = httpResponse.getResponseCode();
          substract_ret._u.xmlSubstractResponse.xmlRepresentation = strdup(httpResponse.getBodyData().c_str());
          break;
          
     }
     
              
     return substract_ret;
}

HttpMessage CalculatorProtocol::deserialize_substractResource_substract(RESTSerializer &restSerializer, HttpMessage &httpMessage)
{
    std::stringstream stream;
    

    // Deserialize a
    DDS_Long  a = 0;
    stream << restSerializer.getQueryParameter("a");
    stream >> a;
    stream.str(std::string());
    stream.clear();

    // Deserialize b
    DDS_Long  b = 0;
    stream << restSerializer.getQueryParameter("b");
    stream >> b;
    stream.str(std::string());
    stream.clear();

    




    
    // TODO Check implementation.
    Calculator::SubstractResponse SubstractResponse = _Calculator_substractResource_impl->substract(  a, b  );
    
    HttpMessage httpResponse;
    switch(SubstractResponse._d)
    {
    case 0:
        httpResponse.setResponseCode(SubstractResponse._u.emptySubstractResponse.status);
        break;
    case 1:
        httpResponse.setResponseCode(SubstractResponse._u.xmlSubstractResponse.status);
    httpResponse.setBodyData(SubstractResponse._u.xmlSubstractResponse.xmlRepresentation); 
        break;

    }

    if(httpResponse.getBodyData().size() > 0)
    {
        if(SubstractResponse._d == 1)
            httpResponse.setBodyContentType("application/xml");
        else if(SubstractResponse._d == 2)
            httpResponse.setBodyContentType("application/json");
    }
    
    return httpResponse;
}



Calculator::MultiplyResponse CalculatorProtocol::Calculator_multiplyResource_multiply(/*in*/ DDS_Long a, /*in*/ DDS_Long b)
{
     stringstream stream;
     RESTSerializer restSerializer;
     eprosima::rpcdds::transport::ProxyTransport &proxyTransport = dynamic_cast<eprosima::rpcdds::transport::ProxyTransport&>( getTransport() );
     Calculator::MultiplyResponse multiply_ret;
     Calculator::MultiplyResponse_initialize(&multiply_ret);
     // XXX TODO if NULL -> error
     
     // Resource Base URI = /calculator/
     // Path = multiply
     // Method = GET
     // Body Parameter = 

     HttpMessage httpMessage;
     
     httpMessage.setMethod(HttpMessage::HTTP_METHOD_GET);
     //TODO Chequear host en el transport.
     httpMessage.setHost("example.com");
     std::string uri("/calculator/multiply"); 
     
        std::string paramValue;
        stream << a;
        paramValue = stream.str();
        stream.str(std::string());
        stream.clear();
        restSerializer.serializeQueryParameter(uri, "a", paramValue);

        stream << b;
        paramValue = stream.str();
        stream.str(std::string());
        stream.clear();
        restSerializer.serializeQueryParameter(uri, "b", paramValue);       

     
     httpMessage.setUri(uri);
     




     
     // HTTP connection
     // TODO Check connection error.
     proxyTransport.connect();
     proxyTransport.send(&httpMessage, 0);
     HttpMessage httpResponse;
     size_t dump;
     proxyTransport.receive(&httpResponse, 0, dump);
     
     
     int discriminator = 0;

     if(httpResponse.getBodyContentType().find("xml") != string::npos)
     {
        discriminator = 1;
     } 
     else if(httpResponse.getBodyContentType().find("json") != string::npos)
     {
        discriminator = 2;
     }
    
     multiply_ret._d = discriminator;
     
     switch(discriminator)
     {
     case 0:
          multiply_ret._u.emptyMultiplyResponse.status = httpResponse.getResponseCode();
          break;
          case 1:
          multiply_ret._u.xmlMultiplyResponse.status = httpResponse.getResponseCode();
          multiply_ret._u.xmlMultiplyResponse.xmlRepresentation = strdup(httpResponse.getBodyData().c_str());
          break;
          
     }
     
              
     return multiply_ret;
}

HttpMessage CalculatorProtocol::deserialize_multiplyResource_multiply(RESTSerializer &restSerializer, HttpMessage &httpMessage)
{
    std::stringstream stream;
    

    // Deserialize a
    DDS_Long  a = 0;
    stream << restSerializer.getQueryParameter("a");
    stream >> a;
    stream.str(std::string());
    stream.clear();

    // Deserialize b
    DDS_Long  b = 0;
    stream << restSerializer.getQueryParameter("b");
    stream >> b;
    stream.str(std::string());
    stream.clear();

    




    
    // TODO Check implementation.
    Calculator::MultiplyResponse MultiplyResponse = _Calculator_multiplyResource_impl->multiply(  a, b  );
    
    HttpMessage httpResponse;
    switch(MultiplyResponse._d)
    {
    case 0:
        httpResponse.setResponseCode(MultiplyResponse._u.emptyMultiplyResponse.status);
        break;
    case 1:
        httpResponse.setResponseCode(MultiplyResponse._u.xmlMultiplyResponse.status);
    httpResponse.setBodyData(MultiplyResponse._u.xmlMultiplyResponse.xmlRepresentation); 
        break;

    }

    if(httpResponse.getBodyData().size() > 0)
    {
        if(MultiplyResponse._d == 1)
            httpResponse.setBodyContentType("application/xml");
        else if(MultiplyResponse._d == 2)
            httpResponse.setBodyContentType("application/json");
    }
    
    return httpResponse;
}



Calculator::DivideResponse CalculatorProtocol::Calculator_divideResource_divide(/*in*/ DDS_Long a, /*in*/ DDS_Long b)
{
     stringstream stream;
     RESTSerializer restSerializer;
     eprosima::rpcdds::transport::ProxyTransport &proxyTransport = dynamic_cast<eprosima::rpcdds::transport::ProxyTransport&>( getTransport() );
     Calculator::DivideResponse divide_ret;
     Calculator::DivideResponse_initialize(&divide_ret);
     // XXX TODO if NULL -> error
     
     // Resource Base URI = /calculator/
     // Path = divide
     // Method = GET
     // Body Parameter = 

     HttpMessage httpMessage;
     
     httpMessage.setMethod(HttpMessage::HTTP_METHOD_GET);
     //TODO Chequear host en el transport.
     httpMessage.setHost("example.com");
     std::string uri("/calculator/divide"); 
     
        std::string paramValue;
        stream << a;
        paramValue = stream.str();
        stream.str(std::string());
        stream.clear();
        restSerializer.serializeQueryParameter(uri, "a", paramValue);

        stream << b;
        paramValue = stream.str();
        stream.str(std::string());
        stream.clear();
        restSerializer.serializeQueryParameter(uri, "b", paramValue);       

     
     httpMessage.setUri(uri);
     




     
     // HTTP connection
     // TODO Check connection error.
     proxyTransport.connect();
     proxyTransport.send(&httpMessage, 0);
     HttpMessage httpResponse;
     size_t dump;
     proxyTransport.receive(&httpResponse, 0, dump);
     
     
     int discriminator = 0;

     if(httpResponse.getBodyContentType().find("xml") != string::npos)
     {
        discriminator = 1;
     } 
     else if(httpResponse.getBodyContentType().find("json") != string::npos)
     {
        discriminator = 2;
     }
    
     divide_ret._d = discriminator;
     
     switch(discriminator)
     {
     case 0:
          divide_ret._u.emptyDivideResponse.status = httpResponse.getResponseCode();
          break;
          case 1:
          divide_ret._u.xmlDivideResponse.status = httpResponse.getResponseCode();
          divide_ret._u.xmlDivideResponse.xmlRepresentation = strdup(httpResponse.getBodyData().c_str());
          break;
          
     }
     
              
     return divide_ret;
}

HttpMessage CalculatorProtocol::deserialize_divideResource_divide(RESTSerializer &restSerializer, HttpMessage &httpMessage)
{
    std::stringstream stream;
    

    // Deserialize a
    DDS_Long  a = 0;
    stream << restSerializer.getQueryParameter("a");
    stream >> a;
    stream.str(std::string());
    stream.clear();

    // Deserialize b
    DDS_Long  b = 0;
    stream << restSerializer.getQueryParameter("b");
    stream >> b;
    stream.str(std::string());
    stream.clear();

    




    
    // TODO Check implementation.
    Calculator::DivideResponse DivideResponse = _Calculator_divideResource_impl->divide(  a, b  );
    
    HttpMessage httpResponse;
    switch(DivideResponse._d)
    {
    case 0:
        httpResponse.setResponseCode(DivideResponse._u.emptyDivideResponse.status);
        break;
    case 1:
        httpResponse.setResponseCode(DivideResponse._u.xmlDivideResponse.status);
    httpResponse.setBodyData(DivideResponse._u.xmlDivideResponse.xmlRepresentation); 
        break;

    }

    if(httpResponse.getBodyData().size() > 0)
    {
        if(DivideResponse._d == 1)
            httpResponse.setBodyContentType("application/xml");
        else if(DivideResponse._d == 2)
            httpResponse.setBodyContentType("application/json");
    }
    
    return httpResponse;
}

