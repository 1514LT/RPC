/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this RPCDDS distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorServerImplExample.cxx
 * This source file contains an example of the declaration of a servant.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorServerImplExample.h"



Calculator::AddResponse addResourceServerImplExample::add(/*in*/ DDS_Long a, /*in*/ DDS_Long b)
{
    Calculator::AddResponse add_ret;
    Calculator::AddResponse_initialize(&add_ret);

	int c = a + b;

    add_ret._d = 1; // 1 -> XML representation
    add_ret._u.xmlAddResponse.status = 200; // HTTP OK
	sprintf(add_ret._u.xmlAddResponse.xmlRepresentation, "<Result>%d</Result>", c);
   
    return add_ret;
} 

Calculator::SubstractResponse substractResourceServerImplExample::substract(/*in*/ DDS_Long a, /*in*/ DDS_Long b)
{
    Calculator::SubstractResponse substract_ret;
    Calculator::SubstractResponse_initialize(&substract_ret);

	int c = a - b;

    substract_ret._d = 1; // 1 -> XML representation
    substract_ret._u.xmlSubstractResponse.status = 200; // HTTP OK
	sprintf(substract_ret._u.xmlSubstractResponse.xmlRepresentation, "<Result>%d</Result>", c);
	   
    return substract_ret;
} 

Calculator::MultiplyResponse multiplyResourceServerImplExample::multiply(/*in*/ DDS_Long a, /*in*/ DDS_Long b)
{
    Calculator::MultiplyResponse multiply_ret;
    Calculator::MultiplyResponse_initialize(&multiply_ret);

	int c = a * b;

    multiply_ret._d = 1; // 1 -> XML representation
    multiply_ret._u.xmlMultiplyResponse.status = 200; // HTTP OK
	sprintf(multiply_ret._u.xmlMultiplyResponse.xmlRepresentation, "<Result>%d</Result>", c);
   
    return multiply_ret;
} 

Calculator::DivideResponse divideResourceServerImplExample::divide(/*in*/ DDS_Long a, /*in*/ DDS_Long b)
{
    Calculator::DivideResponse divide_ret;
    Calculator::DivideResponse_initialize(&divide_ret);

	if(b == 0) {
	    divide_ret._d = 1; // 1 -> XML representation
		divide_ret._u.xmlDivideResponse.status = 400; // Request error
		sprintf(divide_ret._u.xmlDivideResponse.xmlRepresentation, "<Error>Divisor can't be 0</Error>");
		return divide_ret;
	}

	int c = a / b;

    divide_ret._d = 1; // 1 -> XML representation
    divide_ret._u.xmlDivideResponse.status = 200; // HTTP OK
	sprintf(divide_ret._u.xmlDivideResponse.xmlRepresentation, "<Result>%d</Result>", c);
   
    return divide_ret;
} 


