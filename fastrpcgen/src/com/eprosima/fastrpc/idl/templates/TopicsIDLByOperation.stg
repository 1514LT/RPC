group TopicsIDLByOperation;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "RequestReply.idl"], description=["This IDL file contains the definition of the DDS messages for all defined interfaces by the user."])$

#include "MessageHeader.idl"
#include "$ctx.filename$.idl"

$definitions; separator="\n"$
>>

module(ctx, module, definition_list) ::= <<
$if(module.thereAreValidDefinitions)$
module $module.name$
{
    $definition_list$
};

$endif$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
 
$interface.all_operations : { operation |
struct $interface.name$_$operation.name$_In
{
    $if(operation.inputparam)$
    $operation.inputparam : {$it.typecode.idlTypename$ $it.name$;};separator="\n"$
    $else$
    long dummy;
    $endif$
}; $nolevelIDLdefine()$

$preRepIDLDefines(name=[interface.name, "_", operation.name])$
/*!
 * @brief Topic used to receive/send requests for the procedure $operation.name$.
 * @ingroup $ctx.trimfilename$
 */
struct $interface.name$_$operation.name$_Request{
    RequestHeader header;
    $interface.name$_$operation.name$_In $operation.name$;
}; $levelIDLdefine()$

$if(!operation.oneway)$
/*!
 * @brief This structure encapsulates the output parameters.
 * @ingroup $ctx.trimfilename$
 */
struct $interface.name$_$operation.name$_Out
{
    $if([operation.outputparam, operation.rettype])$
    $if(operation.rettype)$$operation.rettype.idlTypename$ return_;$endif$
    $operation.outputparam : {$it.typecode.idlTypename$ $it.name$;};separator="\n"$
    $else$
    long dummy;
    $endif$
}; $nolevelIDLdefine()$

/*!
 * @brief This union is used to encapsulate output parameters and user exceptions.
 * @ingroup $ctx.trimfilename$
 */
union $interface.name$_$operation.name$_Result switch (long)
{
   default:
      UnknownException unknown_exception;
   case 0:
      $interface.name$_$operation.name$_Out out_;
   case 1:
      SystemExceptionCode sysx_;
   $operation.exceptions : { exception |
   case $exception.md5$:
      $exception.scopedname$_t $exception.formatedScopedname$_ex;
   }; separator="\n"$
}; $nolevelIDLdefine()$

$preRepIDLDefines(name=[interface.name, "_", operation.name])$
/*!
 * @brief Topic used to receive/send replies for the procedure $operation.name$.
 * @ingroup $ctx.trimfilename$
 */
struct $interface.name$_$operation.name$_Reply{
    ReplyHeader header;
    $interface.name$_$operation.name$_Result $operation.name$;
}; $levelIDLdefine()$
$endif$
}; separator="\n"$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>
