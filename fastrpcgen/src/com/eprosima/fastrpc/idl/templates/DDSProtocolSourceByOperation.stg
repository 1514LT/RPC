group DDSProtocolSourceByOperation;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "DDSProtocol.cxx"], description=["This source file contains the definition of the protocol used to create DDS messages."])$

#include "$ctx.filename$DDSProtocol.h"
#include "$ctx.product$/transports/Transport.h"
$if(ctx.client)$
#include "$ctx.product$/transports/dds/ProxyTransport.h"
#include "$ctx.product$/transports/dds/components/ProxyProcedureEndpoint.h"
#include "$ctx.filename$DDSAsyncSupport.h"

$endif$
$if(ctx.server)$
#include "$ctx.product$/transports/dds/ServerTransport.h"
#include "$ctx.product$/transports/dds/components/ServerProcedureEndpoint.h"

$endif$
#include "$ctx.product$/exceptions/Exceptions.h"
$if(!ctx.rtiTypes)$
#include "$ctx.filename$TopicsPlugin.h"
$else$
$ReqRepSIncludes(filename=ctx.filename)$
$endif$

using namespace eprosima::rpc;
using namespace ::protocol::dds;
using namespace ::transport;
using namespace ::exception;

$ctx.filename$Protocol::$ctx.filename$Protocol() : ::protocol::$ctx.filename$Protocol(), m_ddsTransport(NULL)
$ctx.scopedInterfaces : { interface |
$interface.operations : { operation |
, $interface.formatedScopedname$_$operation.name$_str("$interface.formatedScopedname$_$operation.name$")
$if(ctx.client)$
, $interface.formatedScopedname$_$operation.name$_pe(NULL)
$endif$
$if(ctx.server)$
, $interface.formatedScopedname$_$operation.name$_se(NULL)
$endif$
}$
}$
{
}

$ctx.filename$Protocol::~$ctx.filename$Protocol()
{
}

bool $ctx.filename$Protocol::setTransport(Transport &transport)
{
    if(strcmp(transport.getType(), "DDS") == 0)
    {
        m_ddsTransport = dynamic_cast<eprosima::rpc::transport::dds::Transport*>(&transport);
        
        m_ddsTransport->initialize();
        
        Protocol::_setTransport(transport);
        
        return true;  
    }
    else
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }
    
    return false;
}

// TODO Si falla que elimine los creados.
bool $ctx.filename$Protocol::activateInterface(const char* interfaceName)
{
    const char *requesttypeName = NULL, *replytypeName = NULL;

    if(m_ddsTransport != NULL)
    {
        TransportBehaviour behaviour = dynamic_cast<Transport*>(m_ddsTransport)->getBehaviour();
        
        $if(first(ctx.scopedInterfaces))$
        if(strcmp(interfaceName, "$first(ctx.scopedInterfaces).scopedname$") == 0)
        {
            $first(ctx.scopedInterfaces).operations : { operation |
            $getTypenameOperation(operation=operation, suffix="_Request", varname="requesttypeName")$
    
            if($registerTypenameOperationAndCheck(operation=operation, suffix="_Request", varname="requesttypeName")$)
            {
                return false;
            }
            
            $if(!operation.oneway)$
            $getTypenameOperation(operation=operation, suffix="_Reply", varname="replytypeName")$
    
            if($registerTypenameOperationAndCheck(operation=operation, suffix="_Reply", varname="replytypeName")$)
            {
                return false;
            }
            $endif$
            
            $if(ctx.client)$
            if(behaviour == ::transport::PROXY_BEHAVIOUR)
            {
                $first(ctx.scopedInterfaces).formatedScopedname$_$operation.name$_pe = dynamic_cast<eprosima::rpc::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($first(ctx.scopedInterfaces).formatedScopedname$_$operation.name$_str,
                requesttypeName,
                $if(!operation.oneway)$replytypeName,
                $eprosimaTypesBool()$,
                $createDataCallback(operation=operation, suffix="_Reply")$,
                $copyDataCallback(operation=operation, suffix="_Reply")$,
                $destroyDataCallback(operation=operation, suffix="_Reply")$,
                NULL,
                sizeof($first(ctx.scopedInterfaces).scopedname$_$operation.name$_Reply)
                $else$NULL, $eprosimaTypesBool()$, NULL, NULL, NULL, NULL, 0$endif$));
            }
            $endif$
            $if(ctx.server)$
            if(behaviour == ::transport::SERVER_BEHAVIOUR)
            {
                $first(ctx.scopedInterfaces).formatedScopedname$_$operation.name$_se = dynamic_cast<eprosima::rpc::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($first(ctx.scopedInterfaces).formatedScopedname$_$operation.name$_str,
                    $if(operation.oneway)$NULL$else$replytypeName$endif$,
                    requesttypeName,
		    $eprosimaTypesBool()$,
                    $createDataCallback(operation=operation, suffix="_Request")$,
                    $copyDataCallback(operation=operation, suffix="_Request")$,
                    $destroyDataCallback(operation=operation, suffix="_Request")$,
                    $ctx.filename$Protocol::$first(ctx.scopedInterfaces).formatedScopedname$_$operation.name$_serve,
                    sizeof($first(ctx.scopedInterfaces).scopedname$_$operation.name$_Request)));
            }
            $endif$
            }; separator="\n"$
        }
        $rest(ctx.scopedInterfaces) : {interface |
        else if(strcmp(interfaceName, "$interface.scopedname$") == 0)
        {
            $interface.operations : { operation |
            $getTypenameOperation(operation=operation, suffix="_Request", varname="requesttypeName")$
    
            if($registerTypenameOperationAndCheck(operation=operation, suffix="_Request", varname="requesttypeName")$)
            {
                return false;
            }
            
            $if(!operation.oneway)$
            $getTypenameOperation(operation=operation, suffix="_Reply", varname="replytypeName")$
    
            if($registerTypenameOperationAndCheck(operation=operation, suffix="_Reply", varname="replytypeName")$)
            {
                return false;
            }
            $endif$
            
            $if(ctx.client)$
            if(behaviour == ::transport::PROXY_BEHAVIOUR)
            {
                $interface.formatedScopedname$_$operation.name$_pe = dynamic_cast<eprosima::rpc::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($interface.formatedScopedname$_$operation.name$_str,
                requesttypeName,
                $if(!operation.oneway)$replytypeName,
                $eprosimaTypesBool()$,
                $createDataCallback(operation=operation, suffix="_Reply")$,
                $copyDataCallback(operation=operation, suffix="_Reply")$,
                $destroyDataCallback(operation=operation, suffix="_Reply")$,
                NULL,
                sizeof($interface.scopedname$_$operation.name$_Reply)
                $else$NULL, $eprosimaTypesBool()$, NULL, NULL, NULL, 0$endif$));
            }
            $endif$
            $if(ctx.server)$
            if(behaviour == ::transport::SERVER_BEHAVIOUR)
            {
                $interface.formatedScopedname$_$operation.name$_se = dynamic_cast<eprosima::rpc::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($interface.formatedScopedname$_$operation.name$_str,
                    $if(operation.oneway)$NULL$else$replytypeName$endif$,
                    requesttypeName,
		    $eprosimaTypesBool()$,
                    $createDataCallback(operation=operation, suffix="_Request")$,
                    $copyDataCallback(operation=operation, suffix="_Request")$,
                    $destroyDataCallback(operation=operation, suffix="_Request")$,
                    $ctx.filename$Protocol::$interface.formatedScopedname$_$operation.name$_serve,
                    sizeof($interface.scopedname$_$operation.name$_Request)));
            }
            $endif$
            }; separator="\n"$
        }
        
        return true;
        }$
        $endif$
    }
    else
    {
      // TODO Trace.
    }
    
    return false;
}

$definitions; separator="\n"$
>>

module(ctx, module, definition_list) ::= <<
$definition_list$

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$if(ctx.client)$
$paramRetType(operation.rettype)$ $ctx.filename$Protocol::$operation.parent.formatedScopedname$_$operation.name$($paramDeclsOnlyOutByRef(params=operation.parameters)$)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    $varDecl(variable=operation.rettypeparam)$
    $operation.parent.scopedname$_$operation.name$_Request instance;
    $if(!operation.oneway)$
    $operation.parent.scopedname$_$operation.name$_Reply retInstance;

    $varComplexInitializeT(typeName=[operation.parent.scopedname, "_", operation.name, "_Reply"], name="retInstance")$
    $endif$
    
    $operation.inputparam : { param |$addParamToTopic(param=param, varname=requestOperationDataByOperation(operation=operation, varname="instance"), isRequest="yes")$};separator="\n"$

    retcode = $operation.parent.formatedScopedname$_$operation.name$_pe->send(&instance, $if(!operation.oneway)$&retInstance$else$NULL$endif$);
    
    $if(!operation.oneway)$
    if(retcode == OK)
    {
        switch ($replyOperationUnionDiscriminatorByOperation(operation=operation, varname="retInstance")$)
        {
            case 0:
		        $[operation.outputparam, operation.rettypeparam] : { param |$extractParamFromTopic(param=param, varname=replyOperationUnionDataAccessByOperation(operation=operation, varname="retInstance", dataname="out_"), isReply="yes")$};separator="\n"$
                break;
            case 1:
                retcode = (eprosima::rpc::ReturnMessage)$replyOperationUnionDataAccessByOperation(operation=operation, varname="retInstance", dataname="sysx_")$;
                break;
            $operation.exceptions : { exception |
            case $exception.md5$:
                {
                $exception.scopedname$ ex;
                // TODO No permite arrays.
                $if(!ctx.rtiTypes)$
                ex = $replyOperationUnionDataByOperation(operation=operation, varname="retInstance")$.$exception.formatedScopedname$_ex();
                $else$
                $exception.members : { member |$extractExceptionMemberFromTopic(exception=exception, member=member, varname=replyOperationUnionDataByOperation(operation=operation, varname="retInstance"))$}; separator="\n"$
                $endif$
                
                ex.raise();
                }
                break;
            }; separator="\n"$
            default:
                throw ClientInternalException("Error extracting information from server");
        }
    }
    
    $endif$  
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case SERVER_NOT_FOUND:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        $if(!operation.oneway)$
        case TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException("");
            break;
        $endif$
        default:
            break;
    };
    

    $if(operation.rettypeparam)$
    return $operation.rettypeparam.name$;
    $endif$
}
$endif$

$if(!operation.oneway)$
void $ctx.filename$Protocol::$operation.parent.formatedScopedname$_$operation.name$_async($operation.parent.scopedname$_$operation.name$CallbackHandler &obj$paramDeclsByValue(params=operation.inputparam, separatorInicial=", ")$)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    $operation.parent.scopedname$_$operation.name$_Request instance;
    $operation.parent.scopedname$_$operation.name$Task *task = new $operation.parent.scopedname$_$operation.name$Task(obj);
    
    $operation.inputparam : { param |$addParamToTopic(param=param, varname=requestOperationDataByOperation(operation=operation, varname="instance"), isRequest="yes")$};separator="\n"$

    retcode = $operation.parent.formatedScopedname$_$operation.name$_pe->send_async(&instance, task);
    
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case SERVER_NOT_FOUND:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}

$endif$

$if(ctx.server)$
void $ctx.filename$Protocol::$operation.parent.formatedScopedname$_$operation.name$_serve(eprosima::rpc::protocol::Protocol &protocol,
    void *data , eprosima::rpc::transport::Endpoint *endpoint)
{
    $ctx.filename$Protocol &_protocol = dynamic_cast<$ctx.filename$Protocol&>(protocol);
    $operation.parent.scopedname$_$operation.name$_Request &requestData = *($operation.parent.scopedname$_$operation.name$_Request*)data;
    $operation.parameters : {param | $varDecl(variable=param, create=param.onlyOutput)$}; separator="\n"$
    $varDecl(variable=operation.rettypeparam, create="yes")$   
    $if(!operation.oneway)$
    $operation.parent.scopedname$_$operation.name$_Reply replyData;
    $copyHeaderInfo(reqvarname="requestData", repvarname="replyData")$
    $endif$

    $operation.inoutputparam : {param |$if(!param.typecode.primitive)$$varComplexInitialize(variable=param)$$\n$$endif$}$

    $operation.inputparam : {param | $extractParamFromTopic(param=param, varname=requestOperationDataByOperation(operation=operation, varname="requestData"))$};separator="\n"$
    
    try
    {
        if(_protocol._$operation.parent.formatedScopedname$_impl != NULL)
        {
	        $if(operation.rettypeparam)$$operation.rettypeparam.name$ = $endif$_protocol._$operation.parent.formatedScopedname$_impl->$operation.name$($extractParams(params=operation.parameters)$);
	
	        $if(!operation.oneway)$
	        $replyOperationUnionDiscriminatorByOperation(operation=operation, varname="replyData")$ = 0;
	     
            $[operation.outputparam, operation.rettypeparam] : { param |$addParamToTopic(param=param, varname=replyOperationUnionDataAccessByOperation(operation=operation, varname="replyData", dataname="out_"))$};separator="\n"$
	        
	        _protocol.$operation.parent.formatedScopedname$_$operation.name$_se->sendReply(&replyData);
	        $endif$
        }
        // TODO Send exception.
    }
    $operation.exceptions : { exception |
    catch(const $exception.scopedname$ &ex)
    {
        $if(!operation.oneway)$
        $replyOperationUnionDiscriminatorByOperation(operation=operation, varname="replyData")$ = $exception.md5$;
        
        $if(!ctx.rtiTypes)$
        $replyOperationUnionDataByOperation(operation=operation, varname="replyData")$.$exception.formatedScopedname$_ex(std::move(ex));
        $else$
        $exception.members : { member |$addExceptionMemberToTopic(exception=exception, member=member, varname=replyOperationUnionDataByOperation(operation=operation, varname="replyData"))$}; separator="\n"$
        $endif$
        
        _protocol.$operation.parent.formatedScopedname$_$operation.name$_se->sendReply(&replyData);
        $endif$
    }
    }; separator="\n"$
    catch(const ServerInternalException &ex)
    {
        $if(!operation.oneway)$
        //TODO Quitar el unsetReply
        //$unsetReply()$
        $replyOperationUnionDiscriminatorByOperation(operation=operation, varname="replyData")$ = 1;
        $replyOperationUnionDataAccessByOperation(operation=operation, varname="replyData", dataname="sysx_")$ = (SystemExceptionCode)SERVER_INTERNAL_ERROR;
        
        _protocol.$operation.parent.formatedScopedname$_$operation.name$_se->sendReply(&replyData);
        $endif$
    }
    
    $reqrepRefFinalize(type=[operation.parent.scopedname, "_", operation.name], reqrep="Request", name="requestData")$
    
    $[operation.outputparam, operation.rettypeparam] : {param | $varDel(variable=param)$}; separator="\n"$
}
$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>

