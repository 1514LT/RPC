group AsyncSupportSourceByOperation;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "AsyncSupport.cxx"], description=["This source file contains functionality to use asynchronous calls for all interfaces."])$

#include "$ctx.filename$DDSAsyncSupport.h"
#include "$ctx.product$/exceptions/ServerInternalException.h"
#include "$ctx.product$/exceptions/ClientInternalException.h"
#include "$ctx.product$/utils/Messages.h"
$if(ctx.rtiTypes)$
$ReqRepIncludes(filename=ctx.filename)$

$ctx.includeDependencies : { include |#include "$include$Exceptions.h"}; separator="\n"$
#include "$ctx.filename$Exceptions.h"
$endif$


using namespace eprosima::rpc;
using namespace ::exception;

$definitions; separator="\n"$
>>

module(ctx, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$interface.all_operations : { operation |
$if(!operation.oneway)$
$interface.name$_$operation.name$Task::$interface.name$_$operation.name$Task($interface.name$_$operation.name$CallbackHandler &obj) :
    DDSAsyncTask(), m_obj(obj)
{
    $varComplexInitializeT(typeName=[interface.name, "_", operation.name, "_Reply"], name="m_reply")$
}

$interface.name$_$operation.name$Task::~$interface.name$_$operation.name$Task()
{
    $varComplexDelT(typeName=[interface.name, "_", operation.name, "_Reply"], name="m_reply")$
}

$interface.name$_$operation.name$CallbackHandler& $interface.name$_$operation.name$Task::getObject()
{
    return m_obj;
}

void* $interface.name$_$operation.name$Task::getReplyInstance()
{
    return &m_reply;
}

void $interface.name$_$operation.name$Task::execute()
{  
    $operation.outputparam : {param | $varDecl(variable=param)$}; separator="\n"$
    $varDecl(variable=operation.rettypeparam)$
    ReturnMessage retcode = eprosima::rpc::OK;
    
    switch ($replyOperationUnionDiscriminatorByOperation(operation=operation, varname="m_reply")$)
    {
        case 0:
            $[operation.outputparam, operation.rettypeparam] : { param |$extractParamFromTopic(param=param, varname=replyOperationUnionDataAccessByOperation(operation=operation, varname="m_reply", dataname="out_"), isReply="yes")$};separator="\n"$
            getObject().$operation.name$($extractParams(params=[operation.outputparam, operation.rettypeparam])$);
            break;
        case 1:
            retcode = (eprosima::rpc::ReturnMessage)$replyOperationUnionDataAccessByOperation(operation=operation, varname="m_reply", dataname="sysx_")$;
            if(retcode == eprosima::rpc::SERVER_INTERNAL_ERROR)
		        getObject().on_exception(ServerInternalException(""));
            break;
        $operation.exceptions : { exception |
        case $exception.md5$:
            {
            $exception.scopedname$ ex;
            // TODO No permite arrays
            $exception.members : { member |$extractExceptionMemberFromTopic(exception=exception, member=member, varname=replyOperationUnionDataByOperation(operation=operation, varname="m_reply"))$}; separator="\n"$

            getObject().on_exception(ex);
            }
            break;
        }; separator="\n"$
        default:
            getObject().on_exception(ClientInternalException("Error extracting information from server"));
    }
}

void $interface.name$_$operation.name$Task::on_exception(const SystemException &ex)
{
    getObject().on_exception(ex);
}

$if(operation.exceptions)$
void $interface.name$_$operation.name$Task::on_exception(const UserException &ex)
{
    getObject().on_exception(ex);
}
$endif$

$endif$
}; separator="\n"$

$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>
