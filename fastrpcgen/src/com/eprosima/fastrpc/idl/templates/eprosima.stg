group eprosima;

varDecl(variable, create) ::= <<
$if(variable)$
$if(variable.typecode.primitive)$
$variable.typecode.cppTypename$  $variable.name$ = $variable.typecode.initialValue$;
$else$
$variable.typecode.cppTypename$  $variable.name$;
$endif$
$endif$
>>

varDel(variable) ::= <<>>

member_default_init(member) ::= <<
$if(member.typecode.primitive)$
m_$member.name$ = $member.typecode.initialValue$;
$endif$
>>

getTypenameOperation(interface, operation, suffix, varname) ::= <<
$varname$ = $interface.scopedname$Plugin::$operation.name$$suffix$Plugin::get_typename();
>>

getTypenameInterface(interface, suffix, varname) ::= <<
$varname$ = $interface.scopedname$$suffix$Plugin::get_typename();
>>

registerTypenameOperationAndCheck(interface, operation, suffix, varname) ::= <<
!$interface.scopedname$Plugin::$operation.name$$suffix$Plugin::register_type(m_ddsTransport->getParticipant(), $varname$)
>>

registerTypenameInterfaceAndCheck(interface, suffix, varname) ::= <<
!$interface.scopedname$$suffix$Plugin::register_type(m_ddsTransport->getParticipant(), $varname$)
>>

createDataCallback(interface, operation, suffix) ::= <<
(::transport::dds::Transport::Create_data)$interface.scopedname$Plugin::$operation.name$$suffix$Plugin::create_data
>>

createDataCallbackInterface(interface, suffix) ::= <<
(::transport::dds::Transport::Create_data)$interface.scopedname$$suffix$Plugin::create_data
>>

copyDataCallback(interface, operation, suffix) ::= <<
(::transport::dds::Transport::Copy_data)$interface.scopedname$Plugin::$operation.name$$suffix$Plugin::copy_data
>>

copyDataCallbackInterface(interface, suffix) ::= <<
(::transport::dds::Transport::Copy_data)$interface.scopedname$$suffix$Plugin::copy_data
>>

destroyDataCallback(interface, operation, suffix) ::= <<
(::transport::dds::Transport::Destroy_data)$interface.scopedname$Plugin::$operation.name$$suffix$Plugin::destroy_data
>>

destroyDataCallbackInterface(interface, suffix) ::= <<
(::transport::dds::Transport::Destroy_data)$interface.scopedname$$suffix$Plugin::destroy_data
>>

addParamToTopic(param, varname, isRequest) ::= <<
$if(param)$
$if(isRequest)$
$varname$.$param.name$($param.name$);
$else$
$if(param.typecode.primitive)$
$varname$.$param.name$($param.name$);
$else$
$varname$.$param.name$(std::move($param.name$));
$endif$
$endif$
$endif$
>>

addExceptionMemberToTopic(exception, member, varname) ::= <<
$if(member.typecode.primitive)$
$varname$.$exception.formatedScopedname$_ex().$member.name$(ex.$member.name$());
$else$
$varname$.$exception.formatedScopedname$_ex().$member.name$(std::move(ex.$member.name$()));
$endif$
>>

extractParamFromTopic(param, varname, isReply) ::= <<
$if(param.typecode.primitive)$
$param.name$ = $varname$.$param.name$();
$else$ 
$param.name$ = std::move($varname$.$param.name$()); //TODO Probar que esto funciona.
$endif$ 
>>

extractExceptionMemberFromTopic(exception, member, varname) ::= <<
$if(member.typecode.primitive)$
ex.$member.name$($varname$.$exception.formatedScopedname$_ex().$member.name$());
$else$
ex.$member.name$(std::move($varname$.$exception.formatedScopedname$_ex().$member.name$()));
$endif$
>>

copyHeaderInfo(reqvarname, repvarname) ::= <<
memcpy($repvarname$.header().request_id().guid().value(), $reqvarname$.header().request_id().guid().value(), 16);
$repvarname$.header().request_id().sequence_number() = $reqvarname$.header().request_id().sequence_number();
>>

requestUnionByInterface(varname) ::= <<
$varname$.request()
>>

requestUnionDiscriminatorByInterface(varname) ::= <<
$requestUnionByInterface(varname=varname)$._d()
>>

requestUnionDataByInterface(varname) ::= <<
$requestUnionByInterface(varname=varname)$
>>

requestOperationDataByOperation(operation, varname) ::= <<
$varname$.$operation.name$()
>>

requestOperationDataByInterface(operation, varname) ::= <<
$requestUnionDataByInterface(varname=varname)$.$operation.name$()
>>

replyUnionByInterface(varname) ::= <<
$varname$.reply()
>>

replyUnionDiscriminatorByInterface(varname) ::= <<
$replyUnionByInterface(varname=varname)$._d()
>>

replyUnionDataByInterface(varname) ::= <<
$replyUnionByInterface(varname=varname)$
>>

replyOperationUnionDiscriminatorByInterface(operation, varname) ::= <<
$varname$.reply().$operation.name$()._d()
>>

replyOperationUnionDiscriminatorByOperation(operation, varname) ::= <<
$varname$.$operation.name$()._d()
>>

replyOperationUnionDataByInterface(operation, varname) ::= <<
$replyUnionDataByInterface(varname=varname)$.$operation.name$()
>>

replyOperationUnionDataByOperation(operation, varname) ::= <<
$varname$.$operation.name$()
>>

replyOperationUnionDataAccessByInterface(operation, varname, dataname) ::= <<
$replyOperationUnionDataByInterface(operation=operation, varname=varname)$.$dataname$()
>>

replyOperationUnionDataAccessByOperation(operation, varname, dataname) ::= <<
$replyOperationUnionDataByOperation(operation=operation, varname=varname)$.$dataname$()
>>

eprosimaTypesBool() ::= <<true>>

/** NEEDED BY RTI TYPES **/
charCasting() ::= <<>>

unsetReply() ::= <<>>

reqrepDestruction(type, reqrep, name, void) ::= <<>>

varComplexInitializeT(typeName, name) ::= <<>>

varComplexInitialize(variable) ::= <<>>

varComplexDelT(typeName, name) ::= <<>>

reqrepRefFinalize(type, reqrep, name) ::= <<>>
