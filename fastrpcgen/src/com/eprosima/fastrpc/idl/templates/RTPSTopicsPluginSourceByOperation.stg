/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of FASTRPC is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this distribution.
 *
 *************************************************************************/

group TopicsPluginSourceByOperation;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "TopicsPlugin.cpp"], description=["TODO This header file contains the declaration of topics generated using operations in the IDL file."])$

#include "$ctx.filename$TopicsPlugin.h"

#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps;

$definitions; separator="\n"$

>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
 
$interface.all_operations : { operation |

$interface.scopedname$Plugin::$operation.name$_RequestPlugin::$operation.name$_RequestPlugin() 
{
	setName("$interface.scopedname$_$operation.name$_Request");
	m_typeSize = (uint32_t)$interface.scopedname$_$operation.name$_Request::getMaxCdrSerializedSize();
	m_isGetKeyDefined = false;
}

$interface.scopedname$Plugin::$operation.name$_RequestPlugin::~$operation.name$_RequestPlugin() 
{
}

bool $interface.scopedname$Plugin::$operation.name$_RequestPlugin::serialize(void *data, SerializedPayload_t *payload) 
{
	$interface.scopedname$_$operation.name$_Request *p_type = ($interface.scopedname$_$operation.name$_Request*) data;
	
	// Object that manages the raw buffer.
	eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size);
	// Object that serializes the data.
	eprosima::fastcdr::Cdr ser(fastbuffer,eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS);
	//Select the correct endianess
	payload->encapsulation = CDR_LE; 
	// Serialize the object:
	p_type->serialize(ser);
	//Get the serialized length
    payload->length = (uint16_t)ser.getSerializedDataLength();
    	
	return true;
}

bool $interface.scopedname$Plugin::$operation.name$_RequestPlugin::deserialize(SerializedPayload_t* payload, void* data)
{
	//CONVERT DATA to pointer of your type
	$interface.scopedname$_$operation.name$_Request* p_type = ($interface.scopedname$_$operation.name$_Request*) data;

	// Object that manages the raw buffer.
	eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length);
	//select the correct endianess
	eprosima::fastcdr::Cdr::Endianness endian = payload->encapsulation == CDR_LE ? eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS : eprosima::fastcdr::Cdr::BIG_ENDIANNESS;
	// Object that deserializes the data.
	eprosima::fastcdr::Cdr deser(fastbuffer,endian);
	//deserialize the object:
	p_type->deserialize(deser);
	return true;
}

std::function<uint32_t()> $interface.scopedname$Plugin::$operation.anme$_RequestPlugin::getSerializedSizeProvider(void* data)
{
    return [data]() -> uint32_t {
        $interface.scopedname$_$operation.name$_Request* p_type = ($interface.scopedname$_$operation.name$_Request*) data;
        return p_type->getSerializedSize();
    };
}

void* $interface.scopedname$Plugin::$operation.name$_RequestPlugin::createData()
{
	return (void*)new $interface.scopedname$_$operation.name$_Request();
}

void* $interface.scopedname$Plugin::$operation.name$_RequestPlugin::create_data()
{
	return (void*)new $interface.scopedname$_$operation.name$_Request();
}

void $interface.scopedname$Plugin::$operation.name$_RequestPlugin::deleteData(void* data)
{
	delete(($interface.scopedname$_$operation.name$_Request*)data);
}

void $interface.scopedname$Plugin::$operation.name$_RequestPlugin::delete_data(void* data)
{
	delete(($interface.scopedname$_$operation.name$_Request*)data);
}

void $interface.scopedname$Plugin::$operation.name$_RequestPlugin::copy_data(
    $interface.name$_$operation.name$_Request *dst,
    const $interface.name$_$operation.name$_Request *src)
{
    *dst = *src;
}

// Reply operations
$if(!operation.oneway)$
$interface.scopedname$Plugin::$operation.name$_ReplyPlugin::$operation.name$_ReplyPlugin() 
{
	setName("$interface.scopedname$_$operation.name$_Reply");
	m_typeSize = (uint32_t)$interface.scopedname$_$operation.name$_Reply::getMaxCdrSerializedSize();
	m_isGetKeyDefined = false;
}

$interface.scopedname$Plugin::$operation.name$_ReplyPlugin::~$operation.name$_ReplyPlugin() 
{
}

bool $interface.scopedname$Plugin::$operation.name$_ReplyPlugin::serialize(void *data, SerializedPayload_t *payload) 
{
	$interface.scopedname$_$operation.name$_Reply *p_type = ($interface.scopedname$_$operation.name$_Reply*) data;
	
	// Object that manages the raw buffer.
	eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size);
	// Object that serializes the data.
	eprosima::fastcdr::Cdr ser(fastbuffer,eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS);
	//Select the correct endianess
	payload->encapsulation = CDR_LE; 
	// Serialize the object:
	p_type->serialize(ser);
	//Get the serialized length
    payload->length = (uint16_t)ser.getSerializedDataLength();
    	
	return true;
}

bool $interface.scopedname$Plugin::$operation.name$_ReplyPlugin::deserialize(SerializedPayload_t* payload, void* data)
{
	//CONVERT DATA to pointer of your type
	$interface.scopedname$_$operation.name$_Reply* p_type = ($interface.scopedname$_$operation.name$_Reply*) data;

	// Object that manages the raw buffer.
	eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length);
	//select the correct endianess
	eprosima::fastcdr::Cdr::Endianness endian = payload->encapsulation == CDR_LE ? eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS : eprosima::fastcdr::Cdr::BIG_ENDIANNESS;
	// Object that deserializes the data.
	eprosima::fastcdr::Cdr deser(fastbuffer,endian);
	//deserialize the object:
	p_type->deserialize(deser);
	return true;
}

std::function<uint32_t()> $interface.scopedname$Plugin::$operation.anme$_ReplyPlugin::getSerializedSizeProvider(void* data)
{
    return [data]() -> uint32_t {
        $interface.scopedname$_$operation.name$_Reply* p_type = ($interface.scopedname$_$operation.name$_Reply*) data;
        return p_type->getSerializedSize();
    };
}

void* $interface.scopedname$Plugin::$operation.name$_ReplyPlugin::createData()
{
	return (void*)new $interface.scopedname$_$operation.name$_Reply();
}

void* $interface.scopedname$Plugin::$operation.name$_ReplyPlugin::create_data()
{
	return (void*)new $interface.scopedname$_$operation.name$_Reply();
}

void $interface.scopedname$Plugin::$operation.name$_ReplyPlugin::deleteData(void* data)
{
	delete(($interface.scopedname$_$operation.name$_Reply*)data);
}

void $interface.scopedname$Plugin::$operation.name$_ReplyPlugin::delete_data(void* data)
{
	delete(($interface.scopedname$_$operation.name$_Reply*)data);
}

void $interface.scopedname$Plugin::$operation.name$_ReplyPlugin::copy_data(
    $interface.name$_$operation.name$_Reply *dst,
    const $interface.name$_$operation.name$_Reply *src)
{
    *dst = *src;
}
$endif$
}; separator="\n"$

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
