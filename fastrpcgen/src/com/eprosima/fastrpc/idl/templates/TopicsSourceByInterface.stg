/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of FASTRPC is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this distribution.
 *
 *************************************************************************/

group TopicsSourceInterface;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Topics.cpp"], description=["This source file contains the implementation of topics generated using operations in the IDL file."])$

#include "$ctx.filename$Topics.h"

#include "fastcdr/Cdr.h"
#include "$ctx.product$/exceptions/BadParamException.h"

$definitions; separator="\n"$

>>

module(ctx, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$

$interface.scopedname$_Call::$interface.name$_Call() : m__d(0)
{
}

$interface.scopedname$_Call::~$interface.name$_Call()
{
}

$interface.scopedname$_Call::$interface.name$_Call(const $interface.name$_Call &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $interface.operations : { operation |
        case $operation.md5$:
            m_$operation.name$ = x.m_$operation.name$;
            break;
        }; separator="\n"$
    }
}

$interface.scopedname$_Call::$interface.name$_Call($interface.name$_Call &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $interface.operations : { operation |
        case $operation.md5$:
            m_$operation.name$ = std::move(x.m_$operation.name$);
            break;
        }; separator="\n"$
    }
}

$interface.scopedname$_Call& $interface.scopedname$_Call::operator=(const $interface.name$_Call &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $interface.operations : { operation |
        case $operation.md5$:
            m_$operation.name$ = x.m_$operation.name$;
            break;
        }; separator="\n"$
    }
    
    return *this;
}

$interface.scopedname$_Call& $interface.scopedname$_Call::operator=($interface.name$_Call &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $interface.operations : { operation |
        case $operation.md5$:
            m_$operation.name$ = std::move(x.m_$operation.name$);
            break;
        }; separator="\n"$
    }
    
    return *this;
}

void $interface.scopedname$_Call::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }
    
    m__d = __d;
}

int32_t $interface.scopedname$_Call::_d() const
{
    return m__d;
}

int32_t& $interface.scopedname$_Call::_d()
{
    return m__d;
}

void $interface.scopedname$_Call::unknown_operation(eprosima::rpc::protocol::dds::UnknownOperation _unknown_operation)
{
    m_unknown_operation = _unknown_operation;
    m__d = 0;
}

eprosima::rpc::protocol::dds::UnknownOperation $interface.scopedname$_Call::unknown_operation() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_unknown_operation;
}

eprosima::rpc::protocol::dds::UnknownOperation& $interface.scopedname$_Call::unknown_operation()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_unknown_operation;
}

$interface.operations : { operation |
void $interface.scopedname$_Call::$operation.name$(const $operation.parent.scopedname$_$operation.name$_In &_$operation.name$)
{
    m_$operation.name$ = _$operation.name$;
    m__d = $operation.md5$;
}

void $interface.scopedname$_Call::$operation.name$($operation.parent.scopedname$_$operation.name$_In &&_$operation.name$)
{
    m_$operation.name$ = std::move(_$operation.name$);
    m__d = $operation.md5$;
}

const $operation.parent.scopedname$_$operation.name$_In& $interface.scopedname$_Call::$operation.name$() const
{
    if(m__d != $operation.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_$operation.name$;
}

$operation.parent.scopedname$_$operation.name$_In& $interface.scopedname$_Call::$operation.name$()
{
    if(m__d != $operation.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_$operation.name$;
}
}; separator="\n"$

size_t $interface.scopedname$_Call::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // Default unknown_operation attribute;
    union_max_size_serialized = current_alignment + 1;

    $interface.operations : { operation |
    reset_alignment = current_alignment;

    reset_alignment += $operation.parent.scopedname$_$operation.name$_In::getMaxCdrSerializedSize(reset_alignment);

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;

    }; separator="\n"$

    return union_max_size_serialized - initial_alignment;
}

size_t $interface.scopedname$_Call::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Discriminator

    return current_align;
}

void $interface.scopedname$_Call::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        $interface.operations : { operation |
        case $operation.md5$:
            scdr << m_$operation.name$;
            break;
        }; separator="\n"$
        default:
            scdr << m_unknown_operation;
            break;
    }
}

void $interface.scopedname$_Call::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> m__d;

    switch(m__d)
    {
        $interface.operations : { operation |
        case $operation.md5$:
            dcdr \>> m_$operation.name$;
            break;
        }; separator="\n"$
        default:
            dcdr \>> m_unknown_operation;
            break;
    }
}

$interface.scopedname$_Request::$interface.name$_Request()
{
}

$interface.scopedname$_Request::~$interface.name$_Request()
{
}

$interface.scopedname$_Request::$interface.name$_Request(const $interface.name$_Request &x)
: m_header(x.m_header), m_request(x.m_request)
{
}

$interface.scopedname$_Request::$interface.name$_Request($interface.name$_Request &&x)
: m_header(std::move(x.m_header)), m_request(std::move(x.m_request))
{
}

$interface.scopedname$_Request& $interface.scopedname$_Request::operator=(const $interface.name$_Request &x)
{
    m_header = x.m_header;
    m_request = x.m_request;
    
    return *this;
}

$interface.scopedname$_Request& $interface.scopedname$_Request::operator=($interface.name$_Request &&x)
{
    m_header = std::move(x.m_header);
    m_request = std::move(x.m_request);
    
    return *this;
}

size_t $interface.scopedname$_Request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment +=  eprosima::rpc::protocol::dds::RequestHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += $interface.name$_Call::getMaxCdrSerializedSize(current_alignment);
            
    return current_alignment - initial_alignment;
}

size_t $interface.scopedname$_Request::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Header and request

    return current_align;
}

void $interface.scopedname$_Request::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_header;
    scdr << m_request;
}

void $interface.scopedname$_Request::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> m_header;
    dcdr \>> m_request;
}

$interface.scopedname$_Return::$interface.name$_Return() : m__d(0)
{
}

$interface.scopedname$_Return::~$interface.name$_Return()
{
}

$interface.scopedname$_Return::$interface.name$_Return(const $interface.name$_Return &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $interface.notOnewayOperations : { operation |
        case $operation.md5$:
            m_$operation.name$ = x.m_$operation.name$;
            break;
        }; separator="\n"$
    }
}

$interface.scopedname$_Return::$interface.name$_Return($interface.name$_Return &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $interface.notOnewayOperations : { operation |
        case $operation.md5$:
            m_$operation.name$ = std::move(x.m_$operation.name$);
            break;
        }; separator="\n"$
    }
}

$interface.scopedname$_Return& $interface.scopedname$_Return::operator=(const $interface.name$_Return &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $interface.notOnewayOperations : { operation |
        case $operation.md5$:
            m_$operation.name$ = x.m_$operation.name$;
            break;
        }; separator="\n"$
    }
    
    return *this;
}

$interface.scopedname$_Return& $interface.scopedname$_Return::operator=($interface.name$_Return &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $interface.notOnewayOperations : { operation |
        case $operation.md5$:
            m_$operation.name$ = std::move(x.m_$operation.name$);
            break;
        }; separator="\n"$
    }
    
    return *this;
}

void $interface.scopedname$_Return::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }
    
    m__d = __d;
}

int32_t $interface.scopedname$_Return::_d() const
{
    return m__d;
}

int32_t& $interface.scopedname$_Return::_d()
{
    return m__d;
}

void $interface.scopedname$_Return::unknown_operation(eprosima::rpc::protocol::dds::UnknownOperation _unknown_operation)
{
    m_unknown_operation = _unknown_operation;
    m__d = 0;
}

eprosima::rpc::protocol::dds::UnknownOperation $interface.scopedname$_Return::unknown_operation() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_unknown_operation;
}

eprosima::rpc::protocol::dds::UnknownOperation& $interface.scopedname$_Return::unknown_operation()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_unknown_operation;
}

$interface.notOnewayOperations : { operation |
void $interface.scopedname$_Return::$operation.name$(const $operation.parent.scopedname$_$operation.name$_Result &_$operation.name$)
{
    m_$operation.name$ = _$operation.name$;
    m__d = $operation.md5$;
}

void $interface.scopedname$_Return::$operation.name$($operation.parent.scopedname$_$operation.name$_Result &&_$operation.name$)
{
    m_$operation.name$ = std::move(_$operation.name$);
    m__d = $operation.md5$;
}

const $operation.parent.scopedname$_$operation.name$_Result& $interface.scopedname$_Return::$operation.name$() const
{
    if(m__d != $operation.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_$operation.name$;
}

$operation.parent.scopedname$_$operation.name$_Result& $interface.scopedname$_Return::$operation.name$()
{
    if(m__d != $operation.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_$operation.name$;
}
}; separator="\n"$

size_t $interface.scopedname$_Return::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // Default unknown_operation attribute;
    union_max_size_serialized = current_alignment + 1;

    $interface.notOnewayOperations : { operation |
    reset_alignment = current_alignment;

    reset_alignment += $operation.parent.scopedname$_$operation.name$_Result::getMaxCdrSerializedSize(reset_alignment);

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;

    }; separator="\n"$

    return union_max_size_serialized - initial_alignment;
}

size_t $interface.scopedname$_Return::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Discriminator

    return current_align;
}

void $interface.scopedname$_Return::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        $interface.notOnewayOperations : { operation |
        case $operation.md5$:
            scdr << m_$operation.name$;
            break;
        }; separator="\n"$
        default:
            scdr << m_unknown_operation;
            break;
    }
}

void $interface.scopedname$_Return::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> m__d;

    switch(m__d)
    {
        $interface.notOnewayOperations : { operation |
        case $operation.md5$:
            dcdr \>> m_$operation.name$;
            break;
        }; separator="\n"$
        default:
            dcdr \>>  m_unknown_operation;
            break;
    }
}

$interface.scopedname$_Reply::$interface.name$_Reply()
{
}

$interface.scopedname$_Reply::~$interface.name$_Reply()
{
}

$interface.scopedname$_Reply::$interface.name$_Reply(const $interface.name$_Reply &x)
: m_header(x.m_header), m_reply(x.m_reply)
{
}

$interface.scopedname$_Reply::$interface.name$_Reply($interface.name$_Reply &&x)
: m_header(std::move(x.m_header)), m_reply(std::move(x.m_reply))
{
}

$interface.scopedname$_Reply& $interface.scopedname$_Reply::operator=(const $interface.name$_Reply &x)
{
    m_header = x.m_header;
    m_reply = x.m_reply;
    
    return *this;
}

$interface.scopedname$_Reply& $interface.scopedname$_Reply::operator=($interface.name$_Reply &&x)
{
    m_header = std::move(x.m_header);
    m_reply = std::move(x.m_reply);
    
    return *this;
}

size_t $interface.scopedname$_Reply::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    current_alignment +=  eprosima::rpc::protocol::dds::ReplyHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += $interface.name$_Return::getMaxCdrSerializedSize(current_alignment);
            
    return current_alignment - initial_alignment;
}

size_t $interface.scopedname$_Reply::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Header and unio

    return current_align;
}

void $interface.scopedname$_Reply::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_header;
    scdr << m_reply;
}

void $interface.scopedname$_Reply::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> m_header;
    dcdr \>> m_reply;
}
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$operation.parent.scopedname$_$operation.name$_In::$operation.parent.name$_$operation.name$_In()
$if(operation.inputparam)$$parameters_default_init(operation.inputparam)$
$else$: m_dummy(0)
$endif$
{
}

$operation.parent.scopedname$_$operation.name$_In::~$operation.parent.name$_$operation.name$_In()
{
}

$operation.parent.scopedname$_$operation.name$_In::$operation.parent.name$_$operation.name$_In(const $operation.parent.name$_$operation.name$_In &x)
$if(operation.inputparam)$$parameters_copy_init(parameters=operation.inputparam)$
$else$: m_dummy(x.m_dummy)
$endif$
{
}

$operation.parent.scopedname$_$operation.name$_In::$operation.parent.name$_$operation.name$_In($operation.parent.name$_$operation.name$_In &&x)
$if(operation.inputparam)$$parameters_move_init(parameters=operation.inputparam)$
$else$: m_dummy(x.m_dummy)
$endif$
{
}

$operation.parent.scopedname$_$operation.name$_In& $operation.parent.scopedname$_$operation.name$_In::operator=(const $operation.parent.scopedname$_$operation.name$_In &x)
{
    $if(operation.inputparam)$
    $operation.inputparam :{ param |$parameters_copy_assigment(param)$;}; separator="\n"$
    $else$
    m_dummy = x.m_dummy;
    $endif$
    
    return *this;
}

$operation.parent.scopedname$_$operation.name$_In& $operation.parent.scopedname$_$operation.name$_In::operator=($operation.parent.scopedname$_$operation.name$_In &&x)
{
    $if(operation.inputparam)$
    $operation.inputparam :{ param |$parameters_move_assigment(param)$;}; separator="\n"$
    $else$
    m_dummy = x.m_dummy;
    $endif$
    
    return *this;
}

size_t $operation.parent.scopedname$_$operation.name$_In::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    $if(operation.inputparam)$
    $operation.inputparam : { param |$max_serialized_size(ctx=ctx, typecode=param.typecode, var="current_alignment")$}; separator="\n"$
    $else$
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    $endif$

    return current_alignment - initial_alignment;
}

size_t $operation.parent.scopedname$_$operation.name$_In::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;

    $operation.inputparam : { param |$serialized_size(param=param, var="current_align")$}; separator="\n"$

    return current_align;
}

void $operation.parent.scopedname$_$operation.name$_In::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    $if(operation.inputparam)$
    $operation.inputparam : { param |$object_serialization(ctx=ctx, object=param, preffix="m_")$}; separator="\n"$
    $else$
    scdr << m_dummy;
    $endif$
}

void $operation.parent.scopedname$_$operation.name$_In::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    $if(operation.inputparam)$
    $operation.inputparam : { param |$object_deserialization(ctx=ctx, object=param, preffix="m_")$}; separator="\n"$
    $else$
    dcdr \>> m_dummy;
    $endif$
}

$if(!operation.oneway)$

$operation.parent.scopedname$_$operation.name$_Out::$operation.parent.name$_$operation.name$_Out()
$if([operation.outputparam, operation.rettypeparam])$$parameters_default_init([operation.outputparam, operation.rettypeparam])$
$else$: m_dummy(0)
$endif$
{
}

$operation.parent.scopedname$_$operation.name$_Out::~$operation.parent.name$_$operation.name$_Out()
{
}

$operation.parent.scopedname$_$operation.name$_Out::$operation.parent.name$_$operation.name$_Out(const $operation.parent.name$_$operation.name$_Out &x)
$if([operation.outputparam, operation.rettypeparam])$$parameters_copy_init(parameters=[operation.outputparam, operation.rettypeparam])$
$else$: m_dummy(x.m_dummy)
$endif$
{
}

$operation.parent.scopedname$_$operation.name$_Out::$operation.parent.name$_$operation.name$_Out($operation.parent.name$_$operation.name$_Out &&x)
$if([operation.outputparam, operation.rettypeparam])$$parameters_move_init(parameters=[operation.outputparam, operation.rettypeparam])$
$else$: m_dummy(x.m_dummy)
$endif$
{
}

$operation.parent.scopedname$_$operation.name$_Out& $operation.parent.scopedname$_$operation.name$_Out::operator=(const $operation.parent.scopedname$_$operation.name$_Out &x)
{
    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] :{ param |$parameters_copy_assigment(param)$;}; separator="\n"$
    $else$
    m_dummy = x.m_dummy;
    $endif$
    
    return *this;
}

$operation.parent.scopedname$_$operation.name$_Out& $operation.parent.scopedname$_$operation.name$_Out::operator=($operation.parent.scopedname$_$operation.name$_Out &&x)
{
    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] :{ param |$parameters_move_assigment(param)$;}; separator="\n"$
    $else$
    m_dummy = x.m_dummy;
    $endif$
    
    return *this;
}

size_t $operation.parent.scopedname$_$operation.name$_Out::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] : { param |$max_serialized_size(ctx=ctx, typecode=param.typecode, var="current_alignment")$}; separator="\n"$
    $else$
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    $endif$

    return current_alignment - initial_alignment;
}

size_t $operation.parent.scopedname$_$operation.name$_Out::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Header

    //$operation.inputparam : { param |$serialized_size(param=param, var="current_align")$}; separator="\n"$

    return current_align;
}

void $operation.parent.scopedname$_$operation.name$_Out::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] : { param |$object_serialization(ctx=ctx, object=param, preffix="m_")$}; separator="\n"$
    $else$
    scdr << m_dummy;
    $endif$
}

void $operation.parent.scopedname$_$operation.name$_Out::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] : { param |$object_deserialization(ctx=ctx, object=param, preffix="m_")$}; separator="\n"$
    $else$
    dcdr \>> m_dummy;
    $endif$
}

$operation.parent.scopedname$_$operation.name$_Result::$operation.parent.name$_$operation.name$_Result() : m__d(2)
{
}

$operation.parent.scopedname$_$operation.name$_Result::~$operation.parent.name$_$operation.name$_Result()
{
}

$operation.parent.scopedname$_$operation.name$_Result::$operation.parent.name$_$operation.name$_Result(const $operation.parent.name$_$operation.name$_Result &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = x.m_out_;
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

        $operation.exceptions : { exception |
        case $exception.md5$:
            m_$exception.formatedScopedname$_ex = x.m_$exception.formatedScopedname$_ex;
            break;
        }; separator="\n"$
    }
}

$operation.parent.scopedname$_$operation.name$_Result::$operation.parent.name$_$operation.name$_Result($operation.parent.name$_$operation.name$_Result &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = std::move(x.m_out_);
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

        $operation.exceptions : { exception |
        case $exception.md5$:
            m_$exception.formatedScopedname$_ex = std::move(x.m_$exception.formatedScopedname$_ex);
            break;
        }; separator="\n"$
    }
}

$operation.parent.scopedname$_$operation.name$_Result& $operation.parent.scopedname$_$operation.name$_Result::operator=(const $operation.parent.scopedname$_$operation.name$_Result &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = x.m_out_;
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

        $operation.exceptions : { exception |
        case $exception.md5$:
            m_$exception.formatedScopedname$_ex = x.m_$exception.formatedScopedname$_ex;
            break;
        }; separator="\n"$
    }
    
    return *this;
}

$operation.parent.scopedname$_$operation.name$_Result& $operation.parent.scopedname$_$operation.name$_Result::operator=($operation.parent.scopedname$_$operation.name$_Result &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = std::move(x.m_out_);
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

        $operation.exceptions : { exception |
        case $exception.md5$:
            m_$exception.formatedScopedname$_ex = std::move(x.m_$exception.formatedScopedname$_ex);
            break;
        }; separator="\n"$
    }
    
    return *this;
}

void $operation.parent.scopedname$_$operation.name$_Result::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }
    
    m__d = __d;
}

int32_t $operation.parent.scopedname$_$operation.name$_Result::_d() const
{
    return m__d;
}

int32_t& $operation.parent.scopedname$_$operation.name$_Result::_d()
{
    return m__d;
}

void $operation.parent.scopedname$_$operation.name$_Result::unknown_exception(eprosima::rpc::protocol::dds::UnknownException _unknown_exception)
{
    m_unknown_exception = _unknown_exception;
    m__d = 2;
}

eprosima::rpc::protocol::dds::UnknownException $operation.parent.scopedname$_$operation.name$_Result::unknown_exception() const
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknown_exception;
}

eprosima::rpc::protocol::dds::UnknownException& $operation.parent.scopedname$_$operation.name$_Result::unknown_exception()
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknown_exception;
}

void $operation.parent.scopedname$_$operation.name$_Result::out_(const $operation.parent.scopedname$_$operation.name$_Out &_out_)
{
    m_out_ = _out_;
    m__d = 0;
}

void $operation.parent.scopedname$_$operation.name$_Result::out_($operation.parent.scopedname$_$operation.name$_Out &&_out_)
{
    m_out_ = std::move(_out_);
    m__d = 0;
}

const $operation.parent.scopedname$_$operation.name$_Out& $operation.parent.scopedname$_$operation.name$_Result::out_() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_out_;
}

$operation.parent.scopedname$_$operation.name$_Out& $operation.parent.scopedname$_$operation.name$_Result::out_()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_out_;
}

void $operation.parent.scopedname$_$operation.name$_Result::sysx_(eprosima::rpc::ReturnMessage _sysx_)
{
    m_sysx_ = _sysx_;
    m__d = 1;
}

eprosima::rpc::ReturnMessage $operation.parent.scopedname$_$operation.name$_Result::sysx_() const
{
    if(m__d != 1)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_sysx_;
}

eprosima::rpc::ReturnMessage& $operation.parent.scopedname$_$operation.name$_Result::sysx_()
{
    if(m__d != 1)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_sysx_;
}

$operation.exceptions:{ exception |$public_exception_union_member_declaration(class=[operation.parent.scopedname, "_", operation.name, "_Result"], exception=exception)$}; separator="\n"$

size_t $operation.parent.scopedname$_$operation.name$_Result::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // sysx_ attribute. The unknown_exception is minor.
    union_max_size_serialized = current_alignment;
    union_max_size_serialized += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    reset_alignment = current_alignment;
    reset_alignment += $operation.parent.scopedname$_$operation.name$_Out::getMaxCdrSerializedSize(reset_alignment);

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;

    $operation.exceptions : { exception |
    reset_alignment = current_alignment;

    reset_alignment += $exception.scopedname$::getMaxCdrSerializedSize(reset_alignment);

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;

    }; separator="\n"$

    return union_max_size_serialized - initial_alignment;
}

size_t $operation.parent.scopedname$_$operation.name$_Result::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Discriminator

    return current_align;
}

void $operation.parent.scopedname$_$operation.name$_Result::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case 0:
            scdr << m_out_;
            break;
        case 1:
            scdr << (int32_t)m_sysx_;
            break;

        $operation.exceptions : { exception |
        case $exception.md5$:
            scdr << m_$exception.formatedScopedname$_ex;
            break;
        }; separator="\n"$

        default:
            scdr << m_unknown_exception;
            break;
    }
}

void $operation.parent.scopedname$_$operation.name$_Result::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> m__d;

    switch(m__d)
    {
        case 0:
            dcdr \>> m_out_;
            break;
        case 1:
            dcdr \>> (int32_t&)m_sysx_;
            break;

        $operation.exceptions : { exception |
        case $exception.md5$:
            dcdr \>> m_$exception.formatedScopedname$_ex;
            break;
        }; separator="\n"$

        default:
            dcdr \>> m_unknown_exception;
            break;
    }
}

$endif$
>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>

/***** Utils *****/

parameters_default_init(parameters) ::= <<
$if(parameters)$: $parameters:{ param |$parameter_default_init(param)$}; separator=", "$$endif$
>>

// TODO Juntar con TypesSource.stg y TypesHeaders.stg de FastBuffers.
parameter_default_init(param) ::= <<
$if(param.typecode.primitive)$
m_$param.name$($param.typecode.initialValue$)
$else$
m_$param.name$()
$endif$
>>

parameters_copy_init(parameters) ::= <<
$if(parameters)$: $parameters:{ param |m_$param.name$(x.m_$param.name$)}; separator=", "$$endif$
>>

parameters_move_init(parameters) ::= <<
$if(parameters)$: $parameters:{ param |m_$param.name$(std::move(x.m_$param.name$))}; separator=", "$$endif$
>>

parameters_copy_assigment(param) ::= <<
m_$param.name$ = x.m_$param.name$;
>>

parameters_move_assigment(param) ::= <<
m_$param.name$ = x.m_$param.name$;
>>

public_exception_union_member_declaration(class, exception) ::= <<
void $class$::$exception.formatedScopedname$_ex(const $exception.scopedname$ &_$exception.formatedScopedname$_ex)
{
    m_$exception.formatedScopedname$_ex = _$exception.formatedScopedname$_ex;
    m__d = $exception.md5$;
}

void $class$::$exception.formatedScopedname$_ex($exception.scopedname$ &&_$exception.formatedScopedname$_ex)
{
    m_$exception.formatedScopedname$_ex = std::move(_$exception.formatedScopedname$_ex);
    m__d = $exception.md5$;
}

const $exception.scopedname$& $class$::$exception.formatedScopedname$_ex() const
{
    if(m__d != $exception.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_$exception.formatedScopedname$_ex;
}

$exception.scopedname$& $class$::$exception.formatedScopedname$_ex()
{
    if(m__d != $exception.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_$exception.formatedScopedname$_ex;
}
>>
